/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gr.ntua.ivml.mint;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProgressResponse implements org.apache.thrift.TBase<ProgressResponse, ProgressResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProgressResponse");

  private static final org.apache.thrift.protocol.TField INSERTED_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("insertedRecords", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONFLICTED_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("conflictedRecords", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRecords", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProgressResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProgressResponseTupleSchemeFactory());
  }

  public int insertedRecords; // required
  public int conflictedRecords; // required
  public int totalRecords; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSERTED_RECORDS((short)1, "insertedRecords"),
    CONFLICTED_RECORDS((short)2, "conflictedRecords"),
    TOTAL_RECORDS((short)3, "totalRecords");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSERTED_RECORDS
          return INSERTED_RECORDS;
        case 2: // CONFLICTED_RECORDS
          return CONFLICTED_RECORDS;
        case 3: // TOTAL_RECORDS
          return TOTAL_RECORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSERTEDRECORDS_ISSET_ID = 0;
  private static final int __CONFLICTEDRECORDS_ISSET_ID = 1;
  private static final int __TOTALRECORDS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSERTED_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("insertedRecords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFLICTED_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("conflictedRecords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("totalRecords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProgressResponse.class, metaDataMap);
  }

  public ProgressResponse() {
  }

  public ProgressResponse(
    int insertedRecords,
    int conflictedRecords,
    int totalRecords)
  {
    this();
    this.insertedRecords = insertedRecords;
    setInsertedRecordsIsSet(true);
    this.conflictedRecords = conflictedRecords;
    setConflictedRecordsIsSet(true);
    this.totalRecords = totalRecords;
    setTotalRecordsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProgressResponse(ProgressResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.insertedRecords = other.insertedRecords;
    this.conflictedRecords = other.conflictedRecords;
    this.totalRecords = other.totalRecords;
  }

  public ProgressResponse deepCopy() {
    return new ProgressResponse(this);
  }

  @Override
  public void clear() {
    setInsertedRecordsIsSet(false);
    this.insertedRecords = 0;
    setConflictedRecordsIsSet(false);
    this.conflictedRecords = 0;
    setTotalRecordsIsSet(false);
    this.totalRecords = 0;
  }

  public int getInsertedRecords() {
    return this.insertedRecords;
  }

  public ProgressResponse setInsertedRecords(int insertedRecords) {
    this.insertedRecords = insertedRecords;
    setInsertedRecordsIsSet(true);
    return this;
  }

  public void unsetInsertedRecords() {
    __isset_bit_vector.clear(__INSERTEDRECORDS_ISSET_ID);
  }

  /** Returns true if field insertedRecords is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertedRecords() {
    return __isset_bit_vector.get(__INSERTEDRECORDS_ISSET_ID);
  }

  public void setInsertedRecordsIsSet(boolean value) {
    __isset_bit_vector.set(__INSERTEDRECORDS_ISSET_ID, value);
  }

  public int getConflictedRecords() {
    return this.conflictedRecords;
  }

  public ProgressResponse setConflictedRecords(int conflictedRecords) {
    this.conflictedRecords = conflictedRecords;
    setConflictedRecordsIsSet(true);
    return this;
  }

  public void unsetConflictedRecords() {
    __isset_bit_vector.clear(__CONFLICTEDRECORDS_ISSET_ID);
  }

  /** Returns true if field conflictedRecords is set (has been assigned a value) and false otherwise */
  public boolean isSetConflictedRecords() {
    return __isset_bit_vector.get(__CONFLICTEDRECORDS_ISSET_ID);
  }

  public void setConflictedRecordsIsSet(boolean value) {
    __isset_bit_vector.set(__CONFLICTEDRECORDS_ISSET_ID, value);
  }

  public int getTotalRecords() {
    return this.totalRecords;
  }

  public ProgressResponse setTotalRecords(int totalRecords) {
    this.totalRecords = totalRecords;
    setTotalRecordsIsSet(true);
    return this;
  }

  public void unsetTotalRecords() {
    __isset_bit_vector.clear(__TOTALRECORDS_ISSET_ID);
  }

  /** Returns true if field totalRecords is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRecords() {
    return __isset_bit_vector.get(__TOTALRECORDS_ISSET_ID);
  }

  public void setTotalRecordsIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALRECORDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSERTED_RECORDS:
      if (value == null) {
        unsetInsertedRecords();
      } else {
        setInsertedRecords((Integer)value);
      }
      break;

    case CONFLICTED_RECORDS:
      if (value == null) {
        unsetConflictedRecords();
      } else {
        setConflictedRecords((Integer)value);
      }
      break;

    case TOTAL_RECORDS:
      if (value == null) {
        unsetTotalRecords();
      } else {
        setTotalRecords((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSERTED_RECORDS:
      return Integer.valueOf(getInsertedRecords());

    case CONFLICTED_RECORDS:
      return Integer.valueOf(getConflictedRecords());

    case TOTAL_RECORDS:
      return Integer.valueOf(getTotalRecords());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSERTED_RECORDS:
      return isSetInsertedRecords();
    case CONFLICTED_RECORDS:
      return isSetConflictedRecords();
    case TOTAL_RECORDS:
      return isSetTotalRecords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProgressResponse)
      return this.equals((ProgressResponse)that);
    return false;
  }

  public boolean equals(ProgressResponse that) {
    if (that == null)
      return false;

    boolean this_present_insertedRecords = true;
    boolean that_present_insertedRecords = true;
    if (this_present_insertedRecords || that_present_insertedRecords) {
      if (!(this_present_insertedRecords && that_present_insertedRecords))
        return false;
      if (this.insertedRecords != that.insertedRecords)
        return false;
    }

    boolean this_present_conflictedRecords = true;
    boolean that_present_conflictedRecords = true;
    if (this_present_conflictedRecords || that_present_conflictedRecords) {
      if (!(this_present_conflictedRecords && that_present_conflictedRecords))
        return false;
      if (this.conflictedRecords != that.conflictedRecords)
        return false;
    }

    boolean this_present_totalRecords = true;
    boolean that_present_totalRecords = true;
    if (this_present_totalRecords || that_present_totalRecords) {
      if (!(this_present_totalRecords && that_present_totalRecords))
        return false;
      if (this.totalRecords != that.totalRecords)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ProgressResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProgressResponse typedOther = (ProgressResponse)other;

    lastComparison = Boolean.valueOf(isSetInsertedRecords()).compareTo(typedOther.isSetInsertedRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertedRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertedRecords, typedOther.insertedRecords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConflictedRecords()).compareTo(typedOther.isSetConflictedRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConflictedRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conflictedRecords, typedOther.conflictedRecords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalRecords()).compareTo(typedOther.isSetTotalRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRecords, typedOther.totalRecords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProgressResponse(");
    boolean first = true;

    sb.append("insertedRecords:");
    sb.append(this.insertedRecords);
    first = false;
    if (!first) sb.append(", ");
    sb.append("conflictedRecords:");
    sb.append(this.conflictedRecords);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalRecords:");
    sb.append(this.totalRecords);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProgressResponseStandardSchemeFactory implements SchemeFactory {
    public ProgressResponseStandardScheme getScheme() {
      return new ProgressResponseStandardScheme();
    }
  }

  private static class ProgressResponseStandardScheme extends StandardScheme<ProgressResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProgressResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSERTED_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.insertedRecords = iprot.readI32();
              struct.setInsertedRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONFLICTED_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.conflictedRecords = iprot.readI32();
              struct.setConflictedRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalRecords = iprot.readI32();
              struct.setTotalRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProgressResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INSERTED_RECORDS_FIELD_DESC);
      oprot.writeI32(struct.insertedRecords);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFLICTED_RECORDS_FIELD_DESC);
      oprot.writeI32(struct.conflictedRecords);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_RECORDS_FIELD_DESC);
      oprot.writeI32(struct.totalRecords);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProgressResponseTupleSchemeFactory implements SchemeFactory {
    public ProgressResponseTupleScheme getScheme() {
      return new ProgressResponseTupleScheme();
    }
  }

  private static class ProgressResponseTupleScheme extends TupleScheme<ProgressResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProgressResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInsertedRecords()) {
        optionals.set(0);
      }
      if (struct.isSetConflictedRecords()) {
        optionals.set(1);
      }
      if (struct.isSetTotalRecords()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInsertedRecords()) {
        oprot.writeI32(struct.insertedRecords);
      }
      if (struct.isSetConflictedRecords()) {
        oprot.writeI32(struct.conflictedRecords);
      }
      if (struct.isSetTotalRecords()) {
        oprot.writeI32(struct.totalRecords);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProgressResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.insertedRecords = iprot.readI32();
        struct.setInsertedRecordsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.conflictedRecords = iprot.readI32();
        struct.setConflictedRecordsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalRecords = iprot.readI32();
        struct.setTotalRecordsIsSet(true);
      }
    }
  }

}

