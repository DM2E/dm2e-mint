/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gr.ntua.ivml.mint;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OAIServer {

  public interface Iface {

    public String createReport(String projectName, int userId, int orgId, List<Integer> datasets) throws org.apache.thrift.TException;

    public String fetchReport(String reportId) throws org.apache.thrift.TException;

    public void closeReport(String reportId) throws org.apache.thrift.TException;

    public void initIndex(String projectName) throws org.apache.thrift.TException;

    public void publishRecordByRecordId(long recordId, String projectName, int userId, int orgId) throws RecordNotFound, org.apache.thrift.TException;

    public void unpublishRecordByRecordId(long recordId, String projectName, int userId, int orgId) throws RecordNotFound, org.apache.thrift.TException;

    public void unpublishRecordsByOrgId(int orgId, int userId, String projectName) throws org.apache.thrift.TException;

    public void unpublishRecordsByDatasetId(int orgId, int userId, String projectName, int datasetId) throws org.apache.thrift.TException;

    public List<String> getReportsByOrgId(int orgId) throws org.apache.thrift.TException;

    public List<String> getReportsByUserId(int userId) throws org.apache.thrift.TException;

    public List<String> getReportsByDatasetId(int datasetId) throws org.apache.thrift.TException;

    public boolean isRecordPublished(long recordId, String projectName) throws org.apache.thrift.TException;

    public boolean isDatasetPublished(int datasetId, String projectName) throws org.apache.thrift.TException;

    public ProgressResponse getProgress(String reportId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createReport(String projectName, int userId, int orgId, List<Integer> datasets, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createReport_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchReport(String reportId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchReport_call> resultHandler) throws org.apache.thrift.TException;

    public void closeReport(String reportId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.closeReport_call> resultHandler) throws org.apache.thrift.TException;

    public void initIndex(String projectName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.initIndex_call> resultHandler) throws org.apache.thrift.TException;

    public void publishRecordByRecordId(long recordId, String projectName, int userId, int orgId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.publishRecordByRecordId_call> resultHandler) throws org.apache.thrift.TException;

    public void unpublishRecordByRecordId(long recordId, String projectName, int userId, int orgId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unpublishRecordByRecordId_call> resultHandler) throws org.apache.thrift.TException;

    public void unpublishRecordsByOrgId(int orgId, int userId, String projectName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unpublishRecordsByOrgId_call> resultHandler) throws org.apache.thrift.TException;

    public void unpublishRecordsByDatasetId(int orgId, int userId, String projectName, int datasetId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unpublishRecordsByDatasetId_call> resultHandler) throws org.apache.thrift.TException;

    public void getReportsByOrgId(int orgId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getReportsByOrgId_call> resultHandler) throws org.apache.thrift.TException;

    public void getReportsByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getReportsByUserId_call> resultHandler) throws org.apache.thrift.TException;

    public void getReportsByDatasetId(int datasetId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getReportsByDatasetId_call> resultHandler) throws org.apache.thrift.TException;

    public void isRecordPublished(long recordId, String projectName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isRecordPublished_call> resultHandler) throws org.apache.thrift.TException;

    public void isDatasetPublished(int datasetId, String projectName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isDatasetPublished_call> resultHandler) throws org.apache.thrift.TException;

    public void getProgress(String reportId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProgress_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createReport(String projectName, int userId, int orgId, List<Integer> datasets) throws org.apache.thrift.TException
    {
      send_createReport(projectName, userId, orgId, datasets);
      return recv_createReport();
    }

    public void send_createReport(String projectName, int userId, int orgId, List<Integer> datasets) throws org.apache.thrift.TException
    {
      createReport_args args = new createReport_args();
      args.setProjectName(projectName);
      args.setUserId(userId);
      args.setOrgId(orgId);
      args.setDatasets(datasets);
      sendBase("createReport", args);
    }

    public String recv_createReport() throws org.apache.thrift.TException
    {
      createReport_result result = new createReport_result();
      receiveBase(result, "createReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createReport failed: unknown result");
    }

    public String fetchReport(String reportId) throws org.apache.thrift.TException
    {
      send_fetchReport(reportId);
      return recv_fetchReport();
    }

    public void send_fetchReport(String reportId) throws org.apache.thrift.TException
    {
      fetchReport_args args = new fetchReport_args();
      args.setReportId(reportId);
      sendBase("fetchReport", args);
    }

    public String recv_fetchReport() throws org.apache.thrift.TException
    {
      fetchReport_result result = new fetchReport_result();
      receiveBase(result, "fetchReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchReport failed: unknown result");
    }

    public void closeReport(String reportId) throws org.apache.thrift.TException
    {
      send_closeReport(reportId);
      recv_closeReport();
    }

    public void send_closeReport(String reportId) throws org.apache.thrift.TException
    {
      closeReport_args args = new closeReport_args();
      args.setReportId(reportId);
      sendBase("closeReport", args);
    }

    public void recv_closeReport() throws org.apache.thrift.TException
    {
      closeReport_result result = new closeReport_result();
      receiveBase(result, "closeReport");
      return;
    }

    public void initIndex(String projectName) throws org.apache.thrift.TException
    {
      send_initIndex(projectName);
      recv_initIndex();
    }

    public void send_initIndex(String projectName) throws org.apache.thrift.TException
    {
      initIndex_args args = new initIndex_args();
      args.setProjectName(projectName);
      sendBase("initIndex", args);
    }

    public void recv_initIndex() throws org.apache.thrift.TException
    {
      initIndex_result result = new initIndex_result();
      receiveBase(result, "initIndex");
      return;
    }

    public void publishRecordByRecordId(long recordId, String projectName, int userId, int orgId) throws RecordNotFound, org.apache.thrift.TException
    {
      send_publishRecordByRecordId(recordId, projectName, userId, orgId);
      recv_publishRecordByRecordId();
    }

    public void send_publishRecordByRecordId(long recordId, String projectName, int userId, int orgId) throws org.apache.thrift.TException
    {
      publishRecordByRecordId_args args = new publishRecordByRecordId_args();
      args.setRecordId(recordId);
      args.setProjectName(projectName);
      args.setUserId(userId);
      args.setOrgId(orgId);
      sendBase("publishRecordByRecordId", args);
    }

    public void recv_publishRecordByRecordId() throws RecordNotFound, org.apache.thrift.TException
    {
      publishRecordByRecordId_result result = new publishRecordByRecordId_result();
      receiveBase(result, "publishRecordByRecordId");
      if (result.cnf != null) {
        throw result.cnf;
      }
      return;
    }

    public void unpublishRecordByRecordId(long recordId, String projectName, int userId, int orgId) throws RecordNotFound, org.apache.thrift.TException
    {
      send_unpublishRecordByRecordId(recordId, projectName, userId, orgId);
      recv_unpublishRecordByRecordId();
    }

    public void send_unpublishRecordByRecordId(long recordId, String projectName, int userId, int orgId) throws org.apache.thrift.TException
    {
      unpublishRecordByRecordId_args args = new unpublishRecordByRecordId_args();
      args.setRecordId(recordId);
      args.setProjectName(projectName);
      args.setUserId(userId);
      args.setOrgId(orgId);
      sendBase("unpublishRecordByRecordId", args);
    }

    public void recv_unpublishRecordByRecordId() throws RecordNotFound, org.apache.thrift.TException
    {
      unpublishRecordByRecordId_result result = new unpublishRecordByRecordId_result();
      receiveBase(result, "unpublishRecordByRecordId");
      if (result.cnf != null) {
        throw result.cnf;
      }
      return;
    }

    public void unpublishRecordsByOrgId(int orgId, int userId, String projectName) throws org.apache.thrift.TException
    {
      send_unpublishRecordsByOrgId(orgId, userId, projectName);
      recv_unpublishRecordsByOrgId();
    }

    public void send_unpublishRecordsByOrgId(int orgId, int userId, String projectName) throws org.apache.thrift.TException
    {
      unpublishRecordsByOrgId_args args = new unpublishRecordsByOrgId_args();
      args.setOrgId(orgId);
      args.setUserId(userId);
      args.setProjectName(projectName);
      sendBase("unpublishRecordsByOrgId", args);
    }

    public void recv_unpublishRecordsByOrgId() throws org.apache.thrift.TException
    {
      unpublishRecordsByOrgId_result result = new unpublishRecordsByOrgId_result();
      receiveBase(result, "unpublishRecordsByOrgId");
      return;
    }

    public void unpublishRecordsByDatasetId(int orgId, int userId, String projectName, int datasetId) throws org.apache.thrift.TException
    {
      send_unpublishRecordsByDatasetId(orgId, userId, projectName, datasetId);
      recv_unpublishRecordsByDatasetId();
    }

    public void send_unpublishRecordsByDatasetId(int orgId, int userId, String projectName, int datasetId) throws org.apache.thrift.TException
    {
      unpublishRecordsByDatasetId_args args = new unpublishRecordsByDatasetId_args();
      args.setOrgId(orgId);
      args.setUserId(userId);
      args.setProjectName(projectName);
      args.setDatasetId(datasetId);
      sendBase("unpublishRecordsByDatasetId", args);
    }

    public void recv_unpublishRecordsByDatasetId() throws org.apache.thrift.TException
    {
      unpublishRecordsByDatasetId_result result = new unpublishRecordsByDatasetId_result();
      receiveBase(result, "unpublishRecordsByDatasetId");
      return;
    }

    public List<String> getReportsByOrgId(int orgId) throws org.apache.thrift.TException
    {
      send_getReportsByOrgId(orgId);
      return recv_getReportsByOrgId();
    }

    public void send_getReportsByOrgId(int orgId) throws org.apache.thrift.TException
    {
      getReportsByOrgId_args args = new getReportsByOrgId_args();
      args.setOrgId(orgId);
      sendBase("getReportsByOrgId", args);
    }

    public List<String> recv_getReportsByOrgId() throws org.apache.thrift.TException
    {
      getReportsByOrgId_result result = new getReportsByOrgId_result();
      receiveBase(result, "getReportsByOrgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReportsByOrgId failed: unknown result");
    }

    public List<String> getReportsByUserId(int userId) throws org.apache.thrift.TException
    {
      send_getReportsByUserId(userId);
      return recv_getReportsByUserId();
    }

    public void send_getReportsByUserId(int userId) throws org.apache.thrift.TException
    {
      getReportsByUserId_args args = new getReportsByUserId_args();
      args.setUserId(userId);
      sendBase("getReportsByUserId", args);
    }

    public List<String> recv_getReportsByUserId() throws org.apache.thrift.TException
    {
      getReportsByUserId_result result = new getReportsByUserId_result();
      receiveBase(result, "getReportsByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReportsByUserId failed: unknown result");
    }

    public List<String> getReportsByDatasetId(int datasetId) throws org.apache.thrift.TException
    {
      send_getReportsByDatasetId(datasetId);
      return recv_getReportsByDatasetId();
    }

    public void send_getReportsByDatasetId(int datasetId) throws org.apache.thrift.TException
    {
      getReportsByDatasetId_args args = new getReportsByDatasetId_args();
      args.setDatasetId(datasetId);
      sendBase("getReportsByDatasetId", args);
    }

    public List<String> recv_getReportsByDatasetId() throws org.apache.thrift.TException
    {
      getReportsByDatasetId_result result = new getReportsByDatasetId_result();
      receiveBase(result, "getReportsByDatasetId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReportsByDatasetId failed: unknown result");
    }

    public boolean isRecordPublished(long recordId, String projectName) throws org.apache.thrift.TException
    {
      send_isRecordPublished(recordId, projectName);
      return recv_isRecordPublished();
    }

    public void send_isRecordPublished(long recordId, String projectName) throws org.apache.thrift.TException
    {
      isRecordPublished_args args = new isRecordPublished_args();
      args.setRecordId(recordId);
      args.setProjectName(projectName);
      sendBase("isRecordPublished", args);
    }

    public boolean recv_isRecordPublished() throws org.apache.thrift.TException
    {
      isRecordPublished_result result = new isRecordPublished_result();
      receiveBase(result, "isRecordPublished");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isRecordPublished failed: unknown result");
    }

    public boolean isDatasetPublished(int datasetId, String projectName) throws org.apache.thrift.TException
    {
      send_isDatasetPublished(datasetId, projectName);
      return recv_isDatasetPublished();
    }

    public void send_isDatasetPublished(int datasetId, String projectName) throws org.apache.thrift.TException
    {
      isDatasetPublished_args args = new isDatasetPublished_args();
      args.setDatasetId(datasetId);
      args.setProjectName(projectName);
      sendBase("isDatasetPublished", args);
    }

    public boolean recv_isDatasetPublished() throws org.apache.thrift.TException
    {
      isDatasetPublished_result result = new isDatasetPublished_result();
      receiveBase(result, "isDatasetPublished");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isDatasetPublished failed: unknown result");
    }

    public ProgressResponse getProgress(String reportId) throws org.apache.thrift.TException
    {
      send_getProgress(reportId);
      return recv_getProgress();
    }

    public void send_getProgress(String reportId) throws org.apache.thrift.TException
    {
      getProgress_args args = new getProgress_args();
      args.setReportId(reportId);
      sendBase("getProgress", args);
    }

    public ProgressResponse recv_getProgress() throws org.apache.thrift.TException
    {
      getProgress_result result = new getProgress_result();
      receiveBase(result, "getProgress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProgress failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createReport(String projectName, int userId, int orgId, List<Integer> datasets, org.apache.thrift.async.AsyncMethodCallback<createReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createReport_call method_call = new createReport_call(projectName, userId, orgId, datasets, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectName;
      private int userId;
      private int orgId;
      private List<Integer> datasets;
      public createReport_call(String projectName, int userId, int orgId, List<Integer> datasets, org.apache.thrift.async.AsyncMethodCallback<createReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectName = projectName;
        this.userId = userId;
        this.orgId = orgId;
        this.datasets = datasets;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createReport_args args = new createReport_args();
        args.setProjectName(projectName);
        args.setUserId(userId);
        args.setOrgId(orgId);
        args.setDatasets(datasets);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createReport();
      }
    }

    public void fetchReport(String reportId, org.apache.thrift.async.AsyncMethodCallback<fetchReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchReport_call method_call = new fetchReport_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reportId;
      public fetchReport_call(String reportId, org.apache.thrift.async.AsyncMethodCallback<fetchReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchReport_args args = new fetchReport_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchReport();
      }
    }

    public void closeReport(String reportId, org.apache.thrift.async.AsyncMethodCallback<closeReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeReport_call method_call = new closeReport_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reportId;
      public closeReport_call(String reportId, org.apache.thrift.async.AsyncMethodCallback<closeReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeReport_args args = new closeReport_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeReport();
      }
    }

    public void initIndex(String projectName, org.apache.thrift.async.AsyncMethodCallback<initIndex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initIndex_call method_call = new initIndex_call(projectName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectName;
      public initIndex_call(String projectName, org.apache.thrift.async.AsyncMethodCallback<initIndex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectName = projectName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initIndex_args args = new initIndex_args();
        args.setProjectName(projectName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_initIndex();
      }
    }

    public void publishRecordByRecordId(long recordId, String projectName, int userId, int orgId, org.apache.thrift.async.AsyncMethodCallback<publishRecordByRecordId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishRecordByRecordId_call method_call = new publishRecordByRecordId_call(recordId, projectName, userId, orgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishRecordByRecordId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long recordId;
      private String projectName;
      private int userId;
      private int orgId;
      public publishRecordByRecordId_call(long recordId, String projectName, int userId, int orgId, org.apache.thrift.async.AsyncMethodCallback<publishRecordByRecordId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recordId = recordId;
        this.projectName = projectName;
        this.userId = userId;
        this.orgId = orgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishRecordByRecordId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publishRecordByRecordId_args args = new publishRecordByRecordId_args();
        args.setRecordId(recordId);
        args.setProjectName(projectName);
        args.setUserId(userId);
        args.setOrgId(orgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws RecordNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_publishRecordByRecordId();
      }
    }

    public void unpublishRecordByRecordId(long recordId, String projectName, int userId, int orgId, org.apache.thrift.async.AsyncMethodCallback<unpublishRecordByRecordId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unpublishRecordByRecordId_call method_call = new unpublishRecordByRecordId_call(recordId, projectName, userId, orgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unpublishRecordByRecordId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long recordId;
      private String projectName;
      private int userId;
      private int orgId;
      public unpublishRecordByRecordId_call(long recordId, String projectName, int userId, int orgId, org.apache.thrift.async.AsyncMethodCallback<unpublishRecordByRecordId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recordId = recordId;
        this.projectName = projectName;
        this.userId = userId;
        this.orgId = orgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unpublishRecordByRecordId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unpublishRecordByRecordId_args args = new unpublishRecordByRecordId_args();
        args.setRecordId(recordId);
        args.setProjectName(projectName);
        args.setUserId(userId);
        args.setOrgId(orgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws RecordNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unpublishRecordByRecordId();
      }
    }

    public void unpublishRecordsByOrgId(int orgId, int userId, String projectName, org.apache.thrift.async.AsyncMethodCallback<unpublishRecordsByOrgId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unpublishRecordsByOrgId_call method_call = new unpublishRecordsByOrgId_call(orgId, userId, projectName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unpublishRecordsByOrgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int orgId;
      private int userId;
      private String projectName;
      public unpublishRecordsByOrgId_call(int orgId, int userId, String projectName, org.apache.thrift.async.AsyncMethodCallback<unpublishRecordsByOrgId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgId = orgId;
        this.userId = userId;
        this.projectName = projectName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unpublishRecordsByOrgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unpublishRecordsByOrgId_args args = new unpublishRecordsByOrgId_args();
        args.setOrgId(orgId);
        args.setUserId(userId);
        args.setProjectName(projectName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unpublishRecordsByOrgId();
      }
    }

    public void unpublishRecordsByDatasetId(int orgId, int userId, String projectName, int datasetId, org.apache.thrift.async.AsyncMethodCallback<unpublishRecordsByDatasetId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unpublishRecordsByDatasetId_call method_call = new unpublishRecordsByDatasetId_call(orgId, userId, projectName, datasetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unpublishRecordsByDatasetId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int orgId;
      private int userId;
      private String projectName;
      private int datasetId;
      public unpublishRecordsByDatasetId_call(int orgId, int userId, String projectName, int datasetId, org.apache.thrift.async.AsyncMethodCallback<unpublishRecordsByDatasetId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgId = orgId;
        this.userId = userId;
        this.projectName = projectName;
        this.datasetId = datasetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unpublishRecordsByDatasetId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unpublishRecordsByDatasetId_args args = new unpublishRecordsByDatasetId_args();
        args.setOrgId(orgId);
        args.setUserId(userId);
        args.setProjectName(projectName);
        args.setDatasetId(datasetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unpublishRecordsByDatasetId();
      }
    }

    public void getReportsByOrgId(int orgId, org.apache.thrift.async.AsyncMethodCallback<getReportsByOrgId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReportsByOrgId_call method_call = new getReportsByOrgId_call(orgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReportsByOrgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int orgId;
      public getReportsByOrgId_call(int orgId, org.apache.thrift.async.AsyncMethodCallback<getReportsByOrgId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgId = orgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReportsByOrgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReportsByOrgId_args args = new getReportsByOrgId_args();
        args.setOrgId(orgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReportsByOrgId();
      }
    }

    public void getReportsByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback<getReportsByUserId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReportsByUserId_call method_call = new getReportsByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReportsByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getReportsByUserId_call(int userId, org.apache.thrift.async.AsyncMethodCallback<getReportsByUserId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReportsByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReportsByUserId_args args = new getReportsByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReportsByUserId();
      }
    }

    public void getReportsByDatasetId(int datasetId, org.apache.thrift.async.AsyncMethodCallback<getReportsByDatasetId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReportsByDatasetId_call method_call = new getReportsByDatasetId_call(datasetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReportsByDatasetId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      public getReportsByDatasetId_call(int datasetId, org.apache.thrift.async.AsyncMethodCallback<getReportsByDatasetId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReportsByDatasetId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReportsByDatasetId_args args = new getReportsByDatasetId_args();
        args.setDatasetId(datasetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReportsByDatasetId();
      }
    }

    public void isRecordPublished(long recordId, String projectName, org.apache.thrift.async.AsyncMethodCallback<isRecordPublished_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isRecordPublished_call method_call = new isRecordPublished_call(recordId, projectName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isRecordPublished_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long recordId;
      private String projectName;
      public isRecordPublished_call(long recordId, String projectName, org.apache.thrift.async.AsyncMethodCallback<isRecordPublished_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recordId = recordId;
        this.projectName = projectName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isRecordPublished", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isRecordPublished_args args = new isRecordPublished_args();
        args.setRecordId(recordId);
        args.setProjectName(projectName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isRecordPublished();
      }
    }

    public void isDatasetPublished(int datasetId, String projectName, org.apache.thrift.async.AsyncMethodCallback<isDatasetPublished_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isDatasetPublished_call method_call = new isDatasetPublished_call(datasetId, projectName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isDatasetPublished_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      private String projectName;
      public isDatasetPublished_call(int datasetId, String projectName, org.apache.thrift.async.AsyncMethodCallback<isDatasetPublished_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
        this.projectName = projectName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isDatasetPublished", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isDatasetPublished_args args = new isDatasetPublished_args();
        args.setDatasetId(datasetId);
        args.setProjectName(projectName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isDatasetPublished();
      }
    }

    public void getProgress(String reportId, org.apache.thrift.async.AsyncMethodCallback<getProgress_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProgress_call method_call = new getProgress_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProgress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reportId;
      public getProgress_call(String reportId, org.apache.thrift.async.AsyncMethodCallback<getProgress_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProgress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProgress_args args = new getProgress_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProgressResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProgress();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createReport", new createReport());
      processMap.put("fetchReport", new fetchReport());
      processMap.put("closeReport", new closeReport());
      processMap.put("initIndex", new initIndex());
      processMap.put("publishRecordByRecordId", new publishRecordByRecordId());
      processMap.put("unpublishRecordByRecordId", new unpublishRecordByRecordId());
      processMap.put("unpublishRecordsByOrgId", new unpublishRecordsByOrgId());
      processMap.put("unpublishRecordsByDatasetId", new unpublishRecordsByDatasetId());
      processMap.put("getReportsByOrgId", new getReportsByOrgId());
      processMap.put("getReportsByUserId", new getReportsByUserId());
      processMap.put("getReportsByDatasetId", new getReportsByDatasetId());
      processMap.put("isRecordPublished", new isRecordPublished());
      processMap.put("isDatasetPublished", new isDatasetPublished());
      processMap.put("getProgress", new getProgress());
      return processMap;
    }

    private static class createReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createReport_args> {
      public createReport() {
        super("createReport");
      }

      protected createReport_args getEmptyArgsInstance() {
        return new createReport_args();
      }

      protected createReport_result getResult(I iface, createReport_args args) throws org.apache.thrift.TException {
        createReport_result result = new createReport_result();
        result.success = iface.createReport(args.projectName, args.userId, args.orgId, args.datasets);
        return result;
      }
    }

    private static class fetchReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchReport_args> {
      public fetchReport() {
        super("fetchReport");
      }

      protected fetchReport_args getEmptyArgsInstance() {
        return new fetchReport_args();
      }

      protected fetchReport_result getResult(I iface, fetchReport_args args) throws org.apache.thrift.TException {
        fetchReport_result result = new fetchReport_result();
        result.success = iface.fetchReport(args.reportId);
        return result;
      }
    }

    private static class closeReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeReport_args> {
      public closeReport() {
        super("closeReport");
      }

      protected closeReport_args getEmptyArgsInstance() {
        return new closeReport_args();
      }

      protected closeReport_result getResult(I iface, closeReport_args args) throws org.apache.thrift.TException {
        closeReport_result result = new closeReport_result();
        iface.closeReport(args.reportId);
        return result;
      }
    }

    private static class initIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initIndex_args> {
      public initIndex() {
        super("initIndex");
      }

      protected initIndex_args getEmptyArgsInstance() {
        return new initIndex_args();
      }

      protected initIndex_result getResult(I iface, initIndex_args args) throws org.apache.thrift.TException {
        initIndex_result result = new initIndex_result();
        iface.initIndex(args.projectName);
        return result;
      }
    }

    private static class publishRecordByRecordId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishRecordByRecordId_args> {
      public publishRecordByRecordId() {
        super("publishRecordByRecordId");
      }

      protected publishRecordByRecordId_args getEmptyArgsInstance() {
        return new publishRecordByRecordId_args();
      }

      protected publishRecordByRecordId_result getResult(I iface, publishRecordByRecordId_args args) throws org.apache.thrift.TException {
        publishRecordByRecordId_result result = new publishRecordByRecordId_result();
        try {
          iface.publishRecordByRecordId(args.recordId, args.projectName, args.userId, args.orgId);
        } catch (RecordNotFound cnf) {
          result.cnf = cnf;
        }
        return result;
      }
    }

    private static class unpublishRecordByRecordId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unpublishRecordByRecordId_args> {
      public unpublishRecordByRecordId() {
        super("unpublishRecordByRecordId");
      }

      protected unpublishRecordByRecordId_args getEmptyArgsInstance() {
        return new unpublishRecordByRecordId_args();
      }

      protected unpublishRecordByRecordId_result getResult(I iface, unpublishRecordByRecordId_args args) throws org.apache.thrift.TException {
        unpublishRecordByRecordId_result result = new unpublishRecordByRecordId_result();
        try {
          iface.unpublishRecordByRecordId(args.recordId, args.projectName, args.userId, args.orgId);
        } catch (RecordNotFound cnf) {
          result.cnf = cnf;
        }
        return result;
      }
    }

    private static class unpublishRecordsByOrgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unpublishRecordsByOrgId_args> {
      public unpublishRecordsByOrgId() {
        super("unpublishRecordsByOrgId");
      }

      protected unpublishRecordsByOrgId_args getEmptyArgsInstance() {
        return new unpublishRecordsByOrgId_args();
      }

      protected unpublishRecordsByOrgId_result getResult(I iface, unpublishRecordsByOrgId_args args) throws org.apache.thrift.TException {
        unpublishRecordsByOrgId_result result = new unpublishRecordsByOrgId_result();
        iface.unpublishRecordsByOrgId(args.orgId, args.userId, args.projectName);
        return result;
      }
    }

    private static class unpublishRecordsByDatasetId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unpublishRecordsByDatasetId_args> {
      public unpublishRecordsByDatasetId() {
        super("unpublishRecordsByDatasetId");
      }

      protected unpublishRecordsByDatasetId_args getEmptyArgsInstance() {
        return new unpublishRecordsByDatasetId_args();
      }

      protected unpublishRecordsByDatasetId_result getResult(I iface, unpublishRecordsByDatasetId_args args) throws org.apache.thrift.TException {
        unpublishRecordsByDatasetId_result result = new unpublishRecordsByDatasetId_result();
        iface.unpublishRecordsByDatasetId(args.orgId, args.userId, args.projectName, args.datasetId);
        return result;
      }
    }

    private static class getReportsByOrgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReportsByOrgId_args> {
      public getReportsByOrgId() {
        super("getReportsByOrgId");
      }

      protected getReportsByOrgId_args getEmptyArgsInstance() {
        return new getReportsByOrgId_args();
      }

      protected getReportsByOrgId_result getResult(I iface, getReportsByOrgId_args args) throws org.apache.thrift.TException {
        getReportsByOrgId_result result = new getReportsByOrgId_result();
        result.success = iface.getReportsByOrgId(args.orgId);
        return result;
      }
    }

    private static class getReportsByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReportsByUserId_args> {
      public getReportsByUserId() {
        super("getReportsByUserId");
      }

      protected getReportsByUserId_args getEmptyArgsInstance() {
        return new getReportsByUserId_args();
      }

      protected getReportsByUserId_result getResult(I iface, getReportsByUserId_args args) throws org.apache.thrift.TException {
        getReportsByUserId_result result = new getReportsByUserId_result();
        result.success = iface.getReportsByUserId(args.userId);
        return result;
      }
    }

    private static class getReportsByDatasetId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReportsByDatasetId_args> {
      public getReportsByDatasetId() {
        super("getReportsByDatasetId");
      }

      protected getReportsByDatasetId_args getEmptyArgsInstance() {
        return new getReportsByDatasetId_args();
      }

      protected getReportsByDatasetId_result getResult(I iface, getReportsByDatasetId_args args) throws org.apache.thrift.TException {
        getReportsByDatasetId_result result = new getReportsByDatasetId_result();
        result.success = iface.getReportsByDatasetId(args.datasetId);
        return result;
      }
    }

    private static class isRecordPublished<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isRecordPublished_args> {
      public isRecordPublished() {
        super("isRecordPublished");
      }

      protected isRecordPublished_args getEmptyArgsInstance() {
        return new isRecordPublished_args();
      }

      protected isRecordPublished_result getResult(I iface, isRecordPublished_args args) throws org.apache.thrift.TException {
        isRecordPublished_result result = new isRecordPublished_result();
        result.success = iface.isRecordPublished(args.recordId, args.projectName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class isDatasetPublished<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isDatasetPublished_args> {
      public isDatasetPublished() {
        super("isDatasetPublished");
      }

      protected isDatasetPublished_args getEmptyArgsInstance() {
        return new isDatasetPublished_args();
      }

      protected isDatasetPublished_result getResult(I iface, isDatasetPublished_args args) throws org.apache.thrift.TException {
        isDatasetPublished_result result = new isDatasetPublished_result();
        result.success = iface.isDatasetPublished(args.datasetId, args.projectName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getProgress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProgress_args> {
      public getProgress() {
        super("getProgress");
      }

      protected getProgress_args getEmptyArgsInstance() {
        return new getProgress_args();
      }

      protected getProgress_result getResult(I iface, getProgress_args args) throws org.apache.thrift.TException {
        getProgress_result result = new getProgress_result();
        result.success = iface.getProgress(args.reportId);
        return result;
      }
    }

  }

  public static class createReport_args implements org.apache.thrift.TBase<createReport_args, createReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createReport_args");

    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField DATASETS_FIELD_DESC = new org.apache.thrift.protocol.TField("datasets", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createReport_argsTupleSchemeFactory());
    }

    public String projectName; // required
    public int userId; // required
    public int orgId; // required
    public List<Integer> datasets; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_NAME((short)1, "projectName"),
      USER_ID((short)2, "userId"),
      ORG_ID((short)3, "orgId"),
      DATASETS((short)4, "datasets");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_NAME
            return PROJECT_NAME;
          case 2: // USER_ID
            return USER_ID;
          case 3: // ORG_ID
            return ORG_ID;
          case 4: // DATASETS
            return DATASETS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ORGID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATASETS, new org.apache.thrift.meta_data.FieldMetaData("datasets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createReport_args.class, metaDataMap);
    }

    public createReport_args() {
    }

    public createReport_args(
      String projectName,
      int userId,
      int orgId,
      List<Integer> datasets)
    {
      this();
      this.projectName = projectName;
      this.userId = userId;
      setUserIdIsSet(true);
      this.orgId = orgId;
      setOrgIdIsSet(true);
      this.datasets = datasets;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createReport_args(createReport_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
      this.userId = other.userId;
      this.orgId = other.orgId;
      if (other.isSetDatasets()) {
        List<Integer> __this__datasets = new ArrayList<Integer>();
        for (Integer other_element : other.datasets) {
          __this__datasets.add(other_element);
        }
        this.datasets = __this__datasets;
      }
    }

    public createReport_args deepCopy() {
      return new createReport_args(this);
    }

    @Override
    public void clear() {
      this.projectName = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setOrgIdIsSet(false);
      this.orgId = 0;
      this.datasets = null;
    }

    public String getProjectName() {
      return this.projectName;
    }

    public createReport_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public createReport_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public int getOrgId() {
      return this.orgId;
    }

    public createReport_args setOrgId(int orgId) {
      this.orgId = orgId;
      setOrgIdIsSet(true);
      return this;
    }

    public void unsetOrgId() {
      __isset_bit_vector.clear(__ORGID_ISSET_ID);
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return __isset_bit_vector.get(__ORGID_ISSET_ID);
    }

    public void setOrgIdIsSet(boolean value) {
      __isset_bit_vector.set(__ORGID_ISSET_ID, value);
    }

    public int getDatasetsSize() {
      return (this.datasets == null) ? 0 : this.datasets.size();
    }

    public java.util.Iterator<Integer> getDatasetsIterator() {
      return (this.datasets == null) ? null : this.datasets.iterator();
    }

    public void addToDatasets(int elem) {
      if (this.datasets == null) {
        this.datasets = new ArrayList<Integer>();
      }
      this.datasets.add(elem);
    }

    public List<Integer> getDatasets() {
      return this.datasets;
    }

    public createReport_args setDatasets(List<Integer> datasets) {
      this.datasets = datasets;
      return this;
    }

    public void unsetDatasets() {
      this.datasets = null;
    }

    /** Returns true if field datasets is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasets() {
      return this.datasets != null;
    }

    public void setDatasetsIsSet(boolean value) {
      if (!value) {
        this.datasets = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((Integer)value);
        }
        break;

      case DATASETS:
        if (value == null) {
          unsetDatasets();
        } else {
          setDatasets((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_NAME:
        return getProjectName();

      case USER_ID:
        return Integer.valueOf(getUserId());

      case ORG_ID:
        return Integer.valueOf(getOrgId());

      case DATASETS:
        return getDatasets();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_NAME:
        return isSetProjectName();
      case USER_ID:
        return isSetUserId();
      case ORG_ID:
        return isSetOrgId();
      case DATASETS:
        return isSetDatasets();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createReport_args)
        return this.equals((createReport_args)that);
      return false;
    }

    public boolean equals(createReport_args that) {
      if (that == null)
        return false;

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_orgId = true;
      boolean that_present_orgId = true;
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (this.orgId != that.orgId)
          return false;
      }

      boolean this_present_datasets = true && this.isSetDatasets();
      boolean that_present_datasets = true && that.isSetDatasets();
      if (this_present_datasets || that_present_datasets) {
        if (!(this_present_datasets && that_present_datasets))
          return false;
        if (!this.datasets.equals(that.datasets))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createReport_args typedOther = (createReport_args)other;

      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(typedOther.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, typedOther.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatasets()).compareTo(typedOther.isSetDatasets());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasets()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasets, typedOther.datasets);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createReport_args(");
      boolean first = true;

      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgId:");
      sb.append(this.orgId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("datasets:");
      if (this.datasets == null) {
        sb.append("null");
      } else {
        sb.append(this.datasets);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createReport_argsStandardSchemeFactory implements SchemeFactory {
      public createReport_argsStandardScheme getScheme() {
        return new createReport_argsStandardScheme();
      }
    }

    private static class createReport_argsStandardScheme extends StandardScheme<createReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgId = iprot.readI32();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATASETS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.datasets = new ArrayList<Integer>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    int _elem2; // required
                    _elem2 = iprot.readI32();
                    struct.datasets.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setDatasetsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeI32(struct.orgId);
        oprot.writeFieldEnd();
        if (struct.datasets != null) {
          oprot.writeFieldBegin(DATASETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.datasets.size()));
            for (int _iter3 : struct.datasets)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createReport_argsTupleSchemeFactory implements SchemeFactory {
      public createReport_argsTupleScheme getScheme() {
        return new createReport_argsTupleScheme();
      }
    }

    private static class createReport_argsTupleScheme extends TupleScheme<createReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectName()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetOrgId()) {
          optionals.set(2);
        }
        if (struct.isSetDatasets()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetOrgId()) {
          oprot.writeI32(struct.orgId);
        }
        if (struct.isSetDatasets()) {
          {
            oprot.writeI32(struct.datasets.size());
            for (int _iter4 : struct.datasets)
            {
              oprot.writeI32(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orgId = iprot.readI32();
          struct.setOrgIdIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.datasets = new ArrayList<Integer>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              int _elem7; // required
              _elem7 = iprot.readI32();
              struct.datasets.add(_elem7);
            }
          }
          struct.setDatasetsIsSet(true);
        }
      }
    }

  }

  public static class createReport_result implements org.apache.thrift.TBase<createReport_result, createReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createReport_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createReport_result.class, metaDataMap);
    }

    public createReport_result() {
    }

    public createReport_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createReport_result(createReport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createReport_result deepCopy() {
      return new createReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createReport_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createReport_result)
        return this.equals((createReport_result)that);
      return false;
    }

    public boolean equals(createReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createReport_result typedOther = (createReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createReport_resultStandardSchemeFactory implements SchemeFactory {
      public createReport_resultStandardScheme getScheme() {
        return new createReport_resultStandardScheme();
      }
    }

    private static class createReport_resultStandardScheme extends StandardScheme<createReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createReport_resultTupleSchemeFactory implements SchemeFactory {
      public createReport_resultTupleScheme getScheme() {
        return new createReport_resultTupleScheme();
      }
    }

    private static class createReport_resultTupleScheme extends TupleScheme<createReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fetchReport_args implements org.apache.thrift.TBase<fetchReport_args, fetchReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchReport_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchReport_argsTupleSchemeFactory());
    }

    public String reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchReport_args.class, metaDataMap);
    }

    public fetchReport_args() {
    }

    public fetchReport_args(
      String reportId)
    {
      this();
      this.reportId = reportId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchReport_args(fetchReport_args other) {
      if (other.isSetReportId()) {
        this.reportId = other.reportId;
      }
    }

    public fetchReport_args deepCopy() {
      return new fetchReport_args(this);
    }

    @Override
    public void clear() {
      this.reportId = null;
    }

    public String getReportId() {
      return this.reportId;
    }

    public fetchReport_args setReportId(String reportId) {
      this.reportId = reportId;
      return this;
    }

    public void unsetReportId() {
      this.reportId = null;
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return this.reportId != null;
    }

    public void setReportIdIsSet(boolean value) {
      if (!value) {
        this.reportId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return getReportId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchReport_args)
        return this.equals((fetchReport_args)that);
      return false;
    }

    public boolean equals(fetchReport_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true && this.isSetReportId();
      boolean that_present_reportId = true && that.isSetReportId();
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (!this.reportId.equals(that.reportId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchReport_args typedOther = (fetchReport_args)other;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(typedOther.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, typedOther.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchReport_args(");
      boolean first = true;

      sb.append("reportId:");
      if (this.reportId == null) {
        sb.append("null");
      } else {
        sb.append(this.reportId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchReport_argsStandardSchemeFactory implements SchemeFactory {
      public fetchReport_argsStandardScheme getScheme() {
        return new fetchReport_argsStandardScheme();
      }
    }

    private static class fetchReport_argsStandardScheme extends StandardScheme<fetchReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reportId = iprot.readString();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reportId != null) {
          oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
          oprot.writeString(struct.reportId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchReport_argsTupleSchemeFactory implements SchemeFactory {
      public fetchReport_argsTupleScheme getScheme() {
        return new fetchReport_argsTupleScheme();
      }
    }

    private static class fetchReport_argsTupleScheme extends TupleScheme<fetchReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeString(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readString();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class fetchReport_result implements org.apache.thrift.TBase<fetchReport_result, fetchReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchReport_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchReport_result.class, metaDataMap);
    }

    public fetchReport_result() {
    }

    public fetchReport_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchReport_result(fetchReport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public fetchReport_result deepCopy() {
      return new fetchReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public fetchReport_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchReport_result)
        return this.equals((fetchReport_result)that);
      return false;
    }

    public boolean equals(fetchReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchReport_result typedOther = (fetchReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchReport_resultStandardSchemeFactory implements SchemeFactory {
      public fetchReport_resultStandardScheme getScheme() {
        return new fetchReport_resultStandardScheme();
      }
    }

    private static class fetchReport_resultStandardScheme extends StandardScheme<fetchReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchReport_resultTupleSchemeFactory implements SchemeFactory {
      public fetchReport_resultTupleScheme getScheme() {
        return new fetchReport_resultTupleScheme();
      }
    }

    private static class fetchReport_resultTupleScheme extends TupleScheme<fetchReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class closeReport_args implements org.apache.thrift.TBase<closeReport_args, closeReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeReport_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeReport_argsTupleSchemeFactory());
    }

    public String reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeReport_args.class, metaDataMap);
    }

    public closeReport_args() {
    }

    public closeReport_args(
      String reportId)
    {
      this();
      this.reportId = reportId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeReport_args(closeReport_args other) {
      if (other.isSetReportId()) {
        this.reportId = other.reportId;
      }
    }

    public closeReport_args deepCopy() {
      return new closeReport_args(this);
    }

    @Override
    public void clear() {
      this.reportId = null;
    }

    public String getReportId() {
      return this.reportId;
    }

    public closeReport_args setReportId(String reportId) {
      this.reportId = reportId;
      return this;
    }

    public void unsetReportId() {
      this.reportId = null;
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return this.reportId != null;
    }

    public void setReportIdIsSet(boolean value) {
      if (!value) {
        this.reportId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return getReportId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeReport_args)
        return this.equals((closeReport_args)that);
      return false;
    }

    public boolean equals(closeReport_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true && this.isSetReportId();
      boolean that_present_reportId = true && that.isSetReportId();
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (!this.reportId.equals(that.reportId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(closeReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      closeReport_args typedOther = (closeReport_args)other;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(typedOther.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, typedOther.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeReport_args(");
      boolean first = true;

      sb.append("reportId:");
      if (this.reportId == null) {
        sb.append("null");
      } else {
        sb.append(this.reportId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeReport_argsStandardSchemeFactory implements SchemeFactory {
      public closeReport_argsStandardScheme getScheme() {
        return new closeReport_argsStandardScheme();
      }
    }

    private static class closeReport_argsStandardScheme extends StandardScheme<closeReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reportId = iprot.readString();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reportId != null) {
          oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
          oprot.writeString(struct.reportId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeReport_argsTupleSchemeFactory implements SchemeFactory {
      public closeReport_argsTupleScheme getScheme() {
        return new closeReport_argsTupleScheme();
      }
    }

    private static class closeReport_argsTupleScheme extends TupleScheme<closeReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeString(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readString();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class closeReport_result implements org.apache.thrift.TBase<closeReport_result, closeReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeReport_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeReport_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeReport_result.class, metaDataMap);
    }

    public closeReport_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeReport_result(closeReport_result other) {
    }

    public closeReport_result deepCopy() {
      return new closeReport_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeReport_result)
        return this.equals((closeReport_result)that);
      return false;
    }

    public boolean equals(closeReport_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(closeReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      closeReport_result typedOther = (closeReport_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeReport_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeReport_resultStandardSchemeFactory implements SchemeFactory {
      public closeReport_resultStandardScheme getScheme() {
        return new closeReport_resultStandardScheme();
      }
    }

    private static class closeReport_resultStandardScheme extends StandardScheme<closeReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeReport_resultTupleSchemeFactory implements SchemeFactory {
      public closeReport_resultTupleScheme getScheme() {
        return new closeReport_resultTupleScheme();
      }
    }

    private static class closeReport_resultTupleScheme extends TupleScheme<closeReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class initIndex_args implements org.apache.thrift.TBase<initIndex_args, initIndex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initIndex_args");

    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initIndex_argsTupleSchemeFactory());
    }

    public String projectName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_NAME((short)1, "projectName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_NAME
            return PROJECT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initIndex_args.class, metaDataMap);
    }

    public initIndex_args() {
    }

    public initIndex_args(
      String projectName)
    {
      this();
      this.projectName = projectName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initIndex_args(initIndex_args other) {
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
    }

    public initIndex_args deepCopy() {
      return new initIndex_args(this);
    }

    @Override
    public void clear() {
      this.projectName = null;
    }

    public String getProjectName() {
      return this.projectName;
    }

    public initIndex_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_NAME:
        return getProjectName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_NAME:
        return isSetProjectName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initIndex_args)
        return this.equals((initIndex_args)that);
      return false;
    }

    public boolean equals(initIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(initIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      initIndex_args typedOther = (initIndex_args)other;

      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initIndex_args(");
      boolean first = true;

      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initIndex_argsStandardSchemeFactory implements SchemeFactory {
      public initIndex_argsStandardScheme getScheme() {
        return new initIndex_argsStandardScheme();
      }
    }

    private static class initIndex_argsStandardScheme extends StandardScheme<initIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initIndex_argsTupleSchemeFactory implements SchemeFactory {
      public initIndex_argsTupleScheme getScheme() {
        return new initIndex_argsTupleScheme();
      }
    }

    private static class initIndex_argsTupleScheme extends TupleScheme<initIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
      }
    }

  }

  public static class initIndex_result implements org.apache.thrift.TBase<initIndex_result, initIndex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initIndex_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initIndex_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initIndex_result.class, metaDataMap);
    }

    public initIndex_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initIndex_result(initIndex_result other) {
    }

    public initIndex_result deepCopy() {
      return new initIndex_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initIndex_result)
        return this.equals((initIndex_result)that);
      return false;
    }

    public boolean equals(initIndex_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(initIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      initIndex_result typedOther = (initIndex_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initIndex_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initIndex_resultStandardSchemeFactory implements SchemeFactory {
      public initIndex_resultStandardScheme getScheme() {
        return new initIndex_resultStandardScheme();
      }
    }

    private static class initIndex_resultStandardScheme extends StandardScheme<initIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initIndex_resultTupleSchemeFactory implements SchemeFactory {
      public initIndex_resultTupleScheme getScheme() {
        return new initIndex_resultTupleScheme();
      }
    }

    private static class initIndex_resultTupleScheme extends TupleScheme<initIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class publishRecordByRecordId_args implements org.apache.thrift.TBase<publishRecordByRecordId_args, publishRecordByRecordId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishRecordByRecordId_args");

    private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishRecordByRecordId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishRecordByRecordId_argsTupleSchemeFactory());
    }

    public long recordId; // required
    public String projectName; // required
    public int userId; // required
    public int orgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD_ID((short)1, "recordId"),
      PROJECT_NAME((short)2, "projectName"),
      USER_ID((short)3, "userId"),
      ORG_ID((short)4, "orgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD_ID
            return RECORD_ID;
          case 2: // PROJECT_NAME
            return PROJECT_NAME;
          case 3: // USER_ID
            return USER_ID;
          case 4: // ORG_ID
            return ORG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECORDID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __ORGID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("recordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishRecordByRecordId_args.class, metaDataMap);
    }

    public publishRecordByRecordId_args() {
    }

    public publishRecordByRecordId_args(
      long recordId,
      String projectName,
      int userId,
      int orgId)
    {
      this();
      this.recordId = recordId;
      setRecordIdIsSet(true);
      this.projectName = projectName;
      this.userId = userId;
      setUserIdIsSet(true);
      this.orgId = orgId;
      setOrgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishRecordByRecordId_args(publishRecordByRecordId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.recordId = other.recordId;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
      this.userId = other.userId;
      this.orgId = other.orgId;
    }

    public publishRecordByRecordId_args deepCopy() {
      return new publishRecordByRecordId_args(this);
    }

    @Override
    public void clear() {
      setRecordIdIsSet(false);
      this.recordId = 0;
      this.projectName = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setOrgIdIsSet(false);
      this.orgId = 0;
    }

    public long getRecordId() {
      return this.recordId;
    }

    public publishRecordByRecordId_args setRecordId(long recordId) {
      this.recordId = recordId;
      setRecordIdIsSet(true);
      return this;
    }

    public void unsetRecordId() {
      __isset_bit_vector.clear(__RECORDID_ISSET_ID);
    }

    /** Returns true if field recordId is set (has been assigned a value) and false otherwise */
    public boolean isSetRecordId() {
      return __isset_bit_vector.get(__RECORDID_ISSET_ID);
    }

    public void setRecordIdIsSet(boolean value) {
      __isset_bit_vector.set(__RECORDID_ISSET_ID, value);
    }

    public String getProjectName() {
      return this.projectName;
    }

    public publishRecordByRecordId_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public publishRecordByRecordId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public int getOrgId() {
      return this.orgId;
    }

    public publishRecordByRecordId_args setOrgId(int orgId) {
      this.orgId = orgId;
      setOrgIdIsSet(true);
      return this;
    }

    public void unsetOrgId() {
      __isset_bit_vector.clear(__ORGID_ISSET_ID);
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return __isset_bit_vector.get(__ORGID_ISSET_ID);
    }

    public void setOrgIdIsSet(boolean value) {
      __isset_bit_vector.set(__ORGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECORD_ID:
        if (value == null) {
          unsetRecordId();
        } else {
          setRecordId((Long)value);
        }
        break;

      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD_ID:
        return Long.valueOf(getRecordId());

      case PROJECT_NAME:
        return getProjectName();

      case USER_ID:
        return Integer.valueOf(getUserId());

      case ORG_ID:
        return Integer.valueOf(getOrgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECORD_ID:
        return isSetRecordId();
      case PROJECT_NAME:
        return isSetProjectName();
      case USER_ID:
        return isSetUserId();
      case ORG_ID:
        return isSetOrgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishRecordByRecordId_args)
        return this.equals((publishRecordByRecordId_args)that);
      return false;
    }

    public boolean equals(publishRecordByRecordId_args that) {
      if (that == null)
        return false;

      boolean this_present_recordId = true;
      boolean that_present_recordId = true;
      if (this_present_recordId || that_present_recordId) {
        if (!(this_present_recordId && that_present_recordId))
          return false;
        if (this.recordId != that.recordId)
          return false;
      }

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_orgId = true;
      boolean that_present_orgId = true;
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (this.orgId != that.orgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(publishRecordByRecordId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      publishRecordByRecordId_args typedOther = (publishRecordByRecordId_args)other;

      lastComparison = Boolean.valueOf(isSetRecordId()).compareTo(typedOther.isSetRecordId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecordId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordId, typedOther.recordId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(typedOther.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, typedOther.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishRecordByRecordId_args(");
      boolean first = true;

      sb.append("recordId:");
      sb.append(this.recordId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgId:");
      sb.append(this.orgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishRecordByRecordId_argsStandardSchemeFactory implements SchemeFactory {
      public publishRecordByRecordId_argsStandardScheme getScheme() {
        return new publishRecordByRecordId_argsStandardScheme();
      }
    }

    private static class publishRecordByRecordId_argsStandardScheme extends StandardScheme<publishRecordByRecordId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.recordId = iprot.readI64();
                struct.setRecordIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgId = iprot.readI32();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
        oprot.writeI64(struct.recordId);
        oprot.writeFieldEnd();
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeI32(struct.orgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishRecordByRecordId_argsTupleSchemeFactory implements SchemeFactory {
      public publishRecordByRecordId_argsTupleScheme getScheme() {
        return new publishRecordByRecordId_argsTupleScheme();
      }
    }

    private static class publishRecordByRecordId_argsTupleScheme extends TupleScheme<publishRecordByRecordId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecordId()) {
          optionals.set(0);
        }
        if (struct.isSetProjectName()) {
          optionals.set(1);
        }
        if (struct.isSetUserId()) {
          optionals.set(2);
        }
        if (struct.isSetOrgId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRecordId()) {
          oprot.writeI64(struct.recordId);
        }
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetOrgId()) {
          oprot.writeI32(struct.orgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.recordId = iprot.readI64();
          struct.setRecordIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.orgId = iprot.readI32();
          struct.setOrgIdIsSet(true);
        }
      }
    }

  }

  public static class publishRecordByRecordId_result implements org.apache.thrift.TBase<publishRecordByRecordId_result, publishRecordByRecordId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishRecordByRecordId_result");

    private static final org.apache.thrift.protocol.TField CNF_FIELD_DESC = new org.apache.thrift.protocol.TField("cnf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishRecordByRecordId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishRecordByRecordId_resultTupleSchemeFactory());
    }

    public RecordNotFound cnf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNF((short)1, "cnf");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNF
            return CNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNF, new org.apache.thrift.meta_data.FieldMetaData("cnf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishRecordByRecordId_result.class, metaDataMap);
    }

    public publishRecordByRecordId_result() {
    }

    public publishRecordByRecordId_result(
      RecordNotFound cnf)
    {
      this();
      this.cnf = cnf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishRecordByRecordId_result(publishRecordByRecordId_result other) {
      if (other.isSetCnf()) {
        this.cnf = new RecordNotFound(other.cnf);
      }
    }

    public publishRecordByRecordId_result deepCopy() {
      return new publishRecordByRecordId_result(this);
    }

    @Override
    public void clear() {
      this.cnf = null;
    }

    public RecordNotFound getCnf() {
      return this.cnf;
    }

    public publishRecordByRecordId_result setCnf(RecordNotFound cnf) {
      this.cnf = cnf;
      return this;
    }

    public void unsetCnf() {
      this.cnf = null;
    }

    /** Returns true if field cnf is set (has been assigned a value) and false otherwise */
    public boolean isSetCnf() {
      return this.cnf != null;
    }

    public void setCnfIsSet(boolean value) {
      if (!value) {
        this.cnf = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CNF:
        if (value == null) {
          unsetCnf();
        } else {
          setCnf((RecordNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CNF:
        return getCnf();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CNF:
        return isSetCnf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishRecordByRecordId_result)
        return this.equals((publishRecordByRecordId_result)that);
      return false;
    }

    public boolean equals(publishRecordByRecordId_result that) {
      if (that == null)
        return false;

      boolean this_present_cnf = true && this.isSetCnf();
      boolean that_present_cnf = true && that.isSetCnf();
      if (this_present_cnf || that_present_cnf) {
        if (!(this_present_cnf && that_present_cnf))
          return false;
        if (!this.cnf.equals(that.cnf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(publishRecordByRecordId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      publishRecordByRecordId_result typedOther = (publishRecordByRecordId_result)other;

      lastComparison = Boolean.valueOf(isSetCnf()).compareTo(typedOther.isSetCnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnf, typedOther.cnf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishRecordByRecordId_result(");
      boolean first = true;

      sb.append("cnf:");
      if (this.cnf == null) {
        sb.append("null");
      } else {
        sb.append(this.cnf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishRecordByRecordId_resultStandardSchemeFactory implements SchemeFactory {
      public publishRecordByRecordId_resultStandardScheme getScheme() {
        return new publishRecordByRecordId_resultStandardScheme();
      }
    }

    private static class publishRecordByRecordId_resultStandardScheme extends StandardScheme<publishRecordByRecordId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnf = new RecordNotFound();
                struct.cnf.read(iprot);
                struct.setCnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cnf != null) {
          oprot.writeFieldBegin(CNF_FIELD_DESC);
          struct.cnf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishRecordByRecordId_resultTupleSchemeFactory implements SchemeFactory {
      public publishRecordByRecordId_resultTupleScheme getScheme() {
        return new publishRecordByRecordId_resultTupleScheme();
      }
    }

    private static class publishRecordByRecordId_resultTupleScheme extends TupleScheme<publishRecordByRecordId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCnf()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCnf()) {
          struct.cnf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cnf = new RecordNotFound();
          struct.cnf.read(iprot);
          struct.setCnfIsSet(true);
        }
      }
    }

  }

  public static class unpublishRecordByRecordId_args implements org.apache.thrift.TBase<unpublishRecordByRecordId_args, unpublishRecordByRecordId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishRecordByRecordId_args");

    private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishRecordByRecordId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishRecordByRecordId_argsTupleSchemeFactory());
    }

    public long recordId; // required
    public String projectName; // required
    public int userId; // required
    public int orgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD_ID((short)1, "recordId"),
      PROJECT_NAME((short)2, "projectName"),
      USER_ID((short)3, "userId"),
      ORG_ID((short)4, "orgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD_ID
            return RECORD_ID;
          case 2: // PROJECT_NAME
            return PROJECT_NAME;
          case 3: // USER_ID
            return USER_ID;
          case 4: // ORG_ID
            return ORG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECORDID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __ORGID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("recordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishRecordByRecordId_args.class, metaDataMap);
    }

    public unpublishRecordByRecordId_args() {
    }

    public unpublishRecordByRecordId_args(
      long recordId,
      String projectName,
      int userId,
      int orgId)
    {
      this();
      this.recordId = recordId;
      setRecordIdIsSet(true);
      this.projectName = projectName;
      this.userId = userId;
      setUserIdIsSet(true);
      this.orgId = orgId;
      setOrgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishRecordByRecordId_args(unpublishRecordByRecordId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.recordId = other.recordId;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
      this.userId = other.userId;
      this.orgId = other.orgId;
    }

    public unpublishRecordByRecordId_args deepCopy() {
      return new unpublishRecordByRecordId_args(this);
    }

    @Override
    public void clear() {
      setRecordIdIsSet(false);
      this.recordId = 0;
      this.projectName = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setOrgIdIsSet(false);
      this.orgId = 0;
    }

    public long getRecordId() {
      return this.recordId;
    }

    public unpublishRecordByRecordId_args setRecordId(long recordId) {
      this.recordId = recordId;
      setRecordIdIsSet(true);
      return this;
    }

    public void unsetRecordId() {
      __isset_bit_vector.clear(__RECORDID_ISSET_ID);
    }

    /** Returns true if field recordId is set (has been assigned a value) and false otherwise */
    public boolean isSetRecordId() {
      return __isset_bit_vector.get(__RECORDID_ISSET_ID);
    }

    public void setRecordIdIsSet(boolean value) {
      __isset_bit_vector.set(__RECORDID_ISSET_ID, value);
    }

    public String getProjectName() {
      return this.projectName;
    }

    public unpublishRecordByRecordId_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public unpublishRecordByRecordId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public int getOrgId() {
      return this.orgId;
    }

    public unpublishRecordByRecordId_args setOrgId(int orgId) {
      this.orgId = orgId;
      setOrgIdIsSet(true);
      return this;
    }

    public void unsetOrgId() {
      __isset_bit_vector.clear(__ORGID_ISSET_ID);
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return __isset_bit_vector.get(__ORGID_ISSET_ID);
    }

    public void setOrgIdIsSet(boolean value) {
      __isset_bit_vector.set(__ORGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECORD_ID:
        if (value == null) {
          unsetRecordId();
        } else {
          setRecordId((Long)value);
        }
        break;

      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD_ID:
        return Long.valueOf(getRecordId());

      case PROJECT_NAME:
        return getProjectName();

      case USER_ID:
        return Integer.valueOf(getUserId());

      case ORG_ID:
        return Integer.valueOf(getOrgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECORD_ID:
        return isSetRecordId();
      case PROJECT_NAME:
        return isSetProjectName();
      case USER_ID:
        return isSetUserId();
      case ORG_ID:
        return isSetOrgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishRecordByRecordId_args)
        return this.equals((unpublishRecordByRecordId_args)that);
      return false;
    }

    public boolean equals(unpublishRecordByRecordId_args that) {
      if (that == null)
        return false;

      boolean this_present_recordId = true;
      boolean that_present_recordId = true;
      if (this_present_recordId || that_present_recordId) {
        if (!(this_present_recordId && that_present_recordId))
          return false;
        if (this.recordId != that.recordId)
          return false;
      }

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_orgId = true;
      boolean that_present_orgId = true;
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (this.orgId != that.orgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unpublishRecordByRecordId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unpublishRecordByRecordId_args typedOther = (unpublishRecordByRecordId_args)other;

      lastComparison = Boolean.valueOf(isSetRecordId()).compareTo(typedOther.isSetRecordId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecordId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordId, typedOther.recordId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(typedOther.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, typedOther.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishRecordByRecordId_args(");
      boolean first = true;

      sb.append("recordId:");
      sb.append(this.recordId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgId:");
      sb.append(this.orgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishRecordByRecordId_argsStandardSchemeFactory implements SchemeFactory {
      public unpublishRecordByRecordId_argsStandardScheme getScheme() {
        return new unpublishRecordByRecordId_argsStandardScheme();
      }
    }

    private static class unpublishRecordByRecordId_argsStandardScheme extends StandardScheme<unpublishRecordByRecordId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.recordId = iprot.readI64();
                struct.setRecordIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgId = iprot.readI32();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
        oprot.writeI64(struct.recordId);
        oprot.writeFieldEnd();
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeI32(struct.orgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishRecordByRecordId_argsTupleSchemeFactory implements SchemeFactory {
      public unpublishRecordByRecordId_argsTupleScheme getScheme() {
        return new unpublishRecordByRecordId_argsTupleScheme();
      }
    }

    private static class unpublishRecordByRecordId_argsTupleScheme extends TupleScheme<unpublishRecordByRecordId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecordId()) {
          optionals.set(0);
        }
        if (struct.isSetProjectName()) {
          optionals.set(1);
        }
        if (struct.isSetUserId()) {
          optionals.set(2);
        }
        if (struct.isSetOrgId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRecordId()) {
          oprot.writeI64(struct.recordId);
        }
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetOrgId()) {
          oprot.writeI32(struct.orgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishRecordByRecordId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.recordId = iprot.readI64();
          struct.setRecordIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.orgId = iprot.readI32();
          struct.setOrgIdIsSet(true);
        }
      }
    }

  }

  public static class unpublishRecordByRecordId_result implements org.apache.thrift.TBase<unpublishRecordByRecordId_result, unpublishRecordByRecordId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishRecordByRecordId_result");

    private static final org.apache.thrift.protocol.TField CNF_FIELD_DESC = new org.apache.thrift.protocol.TField("cnf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishRecordByRecordId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishRecordByRecordId_resultTupleSchemeFactory());
    }

    public RecordNotFound cnf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNF((short)1, "cnf");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNF
            return CNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNF, new org.apache.thrift.meta_data.FieldMetaData("cnf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishRecordByRecordId_result.class, metaDataMap);
    }

    public unpublishRecordByRecordId_result() {
    }

    public unpublishRecordByRecordId_result(
      RecordNotFound cnf)
    {
      this();
      this.cnf = cnf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishRecordByRecordId_result(unpublishRecordByRecordId_result other) {
      if (other.isSetCnf()) {
        this.cnf = new RecordNotFound(other.cnf);
      }
    }

    public unpublishRecordByRecordId_result deepCopy() {
      return new unpublishRecordByRecordId_result(this);
    }

    @Override
    public void clear() {
      this.cnf = null;
    }

    public RecordNotFound getCnf() {
      return this.cnf;
    }

    public unpublishRecordByRecordId_result setCnf(RecordNotFound cnf) {
      this.cnf = cnf;
      return this;
    }

    public void unsetCnf() {
      this.cnf = null;
    }

    /** Returns true if field cnf is set (has been assigned a value) and false otherwise */
    public boolean isSetCnf() {
      return this.cnf != null;
    }

    public void setCnfIsSet(boolean value) {
      if (!value) {
        this.cnf = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CNF:
        if (value == null) {
          unsetCnf();
        } else {
          setCnf((RecordNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CNF:
        return getCnf();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CNF:
        return isSetCnf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishRecordByRecordId_result)
        return this.equals((unpublishRecordByRecordId_result)that);
      return false;
    }

    public boolean equals(unpublishRecordByRecordId_result that) {
      if (that == null)
        return false;

      boolean this_present_cnf = true && this.isSetCnf();
      boolean that_present_cnf = true && that.isSetCnf();
      if (this_present_cnf || that_present_cnf) {
        if (!(this_present_cnf && that_present_cnf))
          return false;
        if (!this.cnf.equals(that.cnf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unpublishRecordByRecordId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unpublishRecordByRecordId_result typedOther = (unpublishRecordByRecordId_result)other;

      lastComparison = Boolean.valueOf(isSetCnf()).compareTo(typedOther.isSetCnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnf, typedOther.cnf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishRecordByRecordId_result(");
      boolean first = true;

      sb.append("cnf:");
      if (this.cnf == null) {
        sb.append("null");
      } else {
        sb.append(this.cnf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishRecordByRecordId_resultStandardSchemeFactory implements SchemeFactory {
      public unpublishRecordByRecordId_resultStandardScheme getScheme() {
        return new unpublishRecordByRecordId_resultStandardScheme();
      }
    }

    private static class unpublishRecordByRecordId_resultStandardScheme extends StandardScheme<unpublishRecordByRecordId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnf = new RecordNotFound();
                struct.cnf.read(iprot);
                struct.setCnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cnf != null) {
          oprot.writeFieldBegin(CNF_FIELD_DESC);
          struct.cnf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishRecordByRecordId_resultTupleSchemeFactory implements SchemeFactory {
      public unpublishRecordByRecordId_resultTupleScheme getScheme() {
        return new unpublishRecordByRecordId_resultTupleScheme();
      }
    }

    private static class unpublishRecordByRecordId_resultTupleScheme extends TupleScheme<unpublishRecordByRecordId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCnf()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCnf()) {
          struct.cnf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishRecordByRecordId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cnf = new RecordNotFound();
          struct.cnf.read(iprot);
          struct.setCnfIsSet(true);
        }
      }
    }

  }

  public static class unpublishRecordsByOrgId_args implements org.apache.thrift.TBase<unpublishRecordsByOrgId_args, unpublishRecordsByOrgId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishRecordsByOrgId_args");

    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishRecordsByOrgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishRecordsByOrgId_argsTupleSchemeFactory());
    }

    public int orgId; // required
    public int userId; // required
    public String projectName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_ID((short)1, "orgId"),
      USER_ID((short)2, "userId"),
      PROJECT_NAME((short)3, "projectName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_ID
            return ORG_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // PROJECT_NAME
            return PROJECT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORGID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishRecordsByOrgId_args.class, metaDataMap);
    }

    public unpublishRecordsByOrgId_args() {
    }

    public unpublishRecordsByOrgId_args(
      int orgId,
      int userId,
      String projectName)
    {
      this();
      this.orgId = orgId;
      setOrgIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
      this.projectName = projectName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishRecordsByOrgId_args(unpublishRecordsByOrgId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.orgId = other.orgId;
      this.userId = other.userId;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
    }

    public unpublishRecordsByOrgId_args deepCopy() {
      return new unpublishRecordsByOrgId_args(this);
    }

    @Override
    public void clear() {
      setOrgIdIsSet(false);
      this.orgId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
      this.projectName = null;
    }

    public int getOrgId() {
      return this.orgId;
    }

    public unpublishRecordsByOrgId_args setOrgId(int orgId) {
      this.orgId = orgId;
      setOrgIdIsSet(true);
      return this;
    }

    public void unsetOrgId() {
      __isset_bit_vector.clear(__ORGID_ISSET_ID);
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return __isset_bit_vector.get(__ORGID_ISSET_ID);
    }

    public void setOrgIdIsSet(boolean value) {
      __isset_bit_vector.set(__ORGID_ISSET_ID, value);
    }

    public int getUserId() {
      return this.userId;
    }

    public unpublishRecordsByOrgId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public String getProjectName() {
      return this.projectName;
    }

    public unpublishRecordsByOrgId_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_ID:
        return Integer.valueOf(getOrgId());

      case USER_ID:
        return Integer.valueOf(getUserId());

      case PROJECT_NAME:
        return getProjectName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_ID:
        return isSetOrgId();
      case USER_ID:
        return isSetUserId();
      case PROJECT_NAME:
        return isSetProjectName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishRecordsByOrgId_args)
        return this.equals((unpublishRecordsByOrgId_args)that);
      return false;
    }

    public boolean equals(unpublishRecordsByOrgId_args that) {
      if (that == null)
        return false;

      boolean this_present_orgId = true;
      boolean that_present_orgId = true;
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (this.orgId != that.orgId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unpublishRecordsByOrgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unpublishRecordsByOrgId_args typedOther = (unpublishRecordsByOrgId_args)other;

      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(typedOther.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, typedOther.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishRecordsByOrgId_args(");
      boolean first = true;

      sb.append("orgId:");
      sb.append(this.orgId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishRecordsByOrgId_argsStandardSchemeFactory implements SchemeFactory {
      public unpublishRecordsByOrgId_argsStandardScheme getScheme() {
        return new unpublishRecordsByOrgId_argsStandardScheme();
      }
    }

    private static class unpublishRecordsByOrgId_argsStandardScheme extends StandardScheme<unpublishRecordsByOrgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishRecordsByOrgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgId = iprot.readI32();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishRecordsByOrgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeI32(struct.orgId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishRecordsByOrgId_argsTupleSchemeFactory implements SchemeFactory {
      public unpublishRecordsByOrgId_argsTupleScheme getScheme() {
        return new unpublishRecordsByOrgId_argsTupleScheme();
      }
    }

    private static class unpublishRecordsByOrgId_argsTupleScheme extends TupleScheme<unpublishRecordsByOrgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetProjectName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOrgId()) {
          oprot.writeI32(struct.orgId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.orgId = iprot.readI32();
          struct.setOrgIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
      }
    }

  }

  public static class unpublishRecordsByOrgId_result implements org.apache.thrift.TBase<unpublishRecordsByOrgId_result, unpublishRecordsByOrgId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishRecordsByOrgId_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishRecordsByOrgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishRecordsByOrgId_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishRecordsByOrgId_result.class, metaDataMap);
    }

    public unpublishRecordsByOrgId_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishRecordsByOrgId_result(unpublishRecordsByOrgId_result other) {
    }

    public unpublishRecordsByOrgId_result deepCopy() {
      return new unpublishRecordsByOrgId_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishRecordsByOrgId_result)
        return this.equals((unpublishRecordsByOrgId_result)that);
      return false;
    }

    public boolean equals(unpublishRecordsByOrgId_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unpublishRecordsByOrgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unpublishRecordsByOrgId_result typedOther = (unpublishRecordsByOrgId_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishRecordsByOrgId_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishRecordsByOrgId_resultStandardSchemeFactory implements SchemeFactory {
      public unpublishRecordsByOrgId_resultStandardScheme getScheme() {
        return new unpublishRecordsByOrgId_resultStandardScheme();
      }
    }

    private static class unpublishRecordsByOrgId_resultStandardScheme extends StandardScheme<unpublishRecordsByOrgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishRecordsByOrgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishRecordsByOrgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishRecordsByOrgId_resultTupleSchemeFactory implements SchemeFactory {
      public unpublishRecordsByOrgId_resultTupleScheme getScheme() {
        return new unpublishRecordsByOrgId_resultTupleScheme();
      }
    }

    private static class unpublishRecordsByOrgId_resultTupleScheme extends TupleScheme<unpublishRecordsByOrgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class unpublishRecordsByDatasetId_args implements org.apache.thrift.TBase<unpublishRecordsByDatasetId_args, unpublishRecordsByDatasetId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishRecordsByDatasetId_args");

    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishRecordsByDatasetId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishRecordsByDatasetId_argsTupleSchemeFactory());
    }

    public int orgId; // required
    public int userId; // required
    public String projectName; // required
    public int datasetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_ID((short)1, "orgId"),
      USER_ID((short)2, "userId"),
      PROJECT_NAME((short)3, "projectName"),
      DATASET_ID((short)4, "datasetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_ID
            return ORG_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // PROJECT_NAME
            return PROJECT_NAME;
          case 4: // DATASET_ID
            return DATASET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORGID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __DATASETID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishRecordsByDatasetId_args.class, metaDataMap);
    }

    public unpublishRecordsByDatasetId_args() {
    }

    public unpublishRecordsByDatasetId_args(
      int orgId,
      int userId,
      String projectName,
      int datasetId)
    {
      this();
      this.orgId = orgId;
      setOrgIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
      this.projectName = projectName;
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishRecordsByDatasetId_args(unpublishRecordsByDatasetId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.orgId = other.orgId;
      this.userId = other.userId;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
      this.datasetId = other.datasetId;
    }

    public unpublishRecordsByDatasetId_args deepCopy() {
      return new unpublishRecordsByDatasetId_args(this);
    }

    @Override
    public void clear() {
      setOrgIdIsSet(false);
      this.orgId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
      this.projectName = null;
      setDatasetIdIsSet(false);
      this.datasetId = 0;
    }

    public int getOrgId() {
      return this.orgId;
    }

    public unpublishRecordsByDatasetId_args setOrgId(int orgId) {
      this.orgId = orgId;
      setOrgIdIsSet(true);
      return this;
    }

    public void unsetOrgId() {
      __isset_bit_vector.clear(__ORGID_ISSET_ID);
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return __isset_bit_vector.get(__ORGID_ISSET_ID);
    }

    public void setOrgIdIsSet(boolean value) {
      __isset_bit_vector.set(__ORGID_ISSET_ID, value);
    }

    public int getUserId() {
      return this.userId;
    }

    public unpublishRecordsByDatasetId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public String getProjectName() {
      return this.projectName;
    }

    public unpublishRecordsByDatasetId_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public unpublishRecordsByDatasetId_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bit_vector.clear(__DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return __isset_bit_vector.get(__DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bit_vector.set(__DATASETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_ID:
        return Integer.valueOf(getOrgId());

      case USER_ID:
        return Integer.valueOf(getUserId());

      case PROJECT_NAME:
        return getProjectName();

      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_ID:
        return isSetOrgId();
      case USER_ID:
        return isSetUserId();
      case PROJECT_NAME:
        return isSetProjectName();
      case DATASET_ID:
        return isSetDatasetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishRecordsByDatasetId_args)
        return this.equals((unpublishRecordsByDatasetId_args)that);
      return false;
    }

    public boolean equals(unpublishRecordsByDatasetId_args that) {
      if (that == null)
        return false;

      boolean this_present_orgId = true;
      boolean that_present_orgId = true;
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (this.orgId != that.orgId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unpublishRecordsByDatasetId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unpublishRecordsByDatasetId_args typedOther = (unpublishRecordsByDatasetId_args)other;

      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(typedOther.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, typedOther.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishRecordsByDatasetId_args(");
      boolean first = true;

      sb.append("orgId:");
      sb.append(this.orgId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishRecordsByDatasetId_argsStandardSchemeFactory implements SchemeFactory {
      public unpublishRecordsByDatasetId_argsStandardScheme getScheme() {
        return new unpublishRecordsByDatasetId_argsStandardScheme();
      }
    }

    private static class unpublishRecordsByDatasetId_argsStandardScheme extends StandardScheme<unpublishRecordsByDatasetId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishRecordsByDatasetId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgId = iprot.readI32();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishRecordsByDatasetId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeI32(struct.orgId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishRecordsByDatasetId_argsTupleSchemeFactory implements SchemeFactory {
      public unpublishRecordsByDatasetId_argsTupleScheme getScheme() {
        return new unpublishRecordsByDatasetId_argsTupleScheme();
      }
    }

    private static class unpublishRecordsByDatasetId_argsTupleScheme extends TupleScheme<unpublishRecordsByDatasetId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByDatasetId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetProjectName()) {
          optionals.set(2);
        }
        if (struct.isSetDatasetId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOrgId()) {
          oprot.writeI32(struct.orgId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByDatasetId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.orgId = iprot.readI32();
          struct.setOrgIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
      }
    }

  }

  public static class unpublishRecordsByDatasetId_result implements org.apache.thrift.TBase<unpublishRecordsByDatasetId_result, unpublishRecordsByDatasetId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishRecordsByDatasetId_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishRecordsByDatasetId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishRecordsByDatasetId_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishRecordsByDatasetId_result.class, metaDataMap);
    }

    public unpublishRecordsByDatasetId_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishRecordsByDatasetId_result(unpublishRecordsByDatasetId_result other) {
    }

    public unpublishRecordsByDatasetId_result deepCopy() {
      return new unpublishRecordsByDatasetId_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishRecordsByDatasetId_result)
        return this.equals((unpublishRecordsByDatasetId_result)that);
      return false;
    }

    public boolean equals(unpublishRecordsByDatasetId_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unpublishRecordsByDatasetId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unpublishRecordsByDatasetId_result typedOther = (unpublishRecordsByDatasetId_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishRecordsByDatasetId_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishRecordsByDatasetId_resultStandardSchemeFactory implements SchemeFactory {
      public unpublishRecordsByDatasetId_resultStandardScheme getScheme() {
        return new unpublishRecordsByDatasetId_resultStandardScheme();
      }
    }

    private static class unpublishRecordsByDatasetId_resultStandardScheme extends StandardScheme<unpublishRecordsByDatasetId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishRecordsByDatasetId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishRecordsByDatasetId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishRecordsByDatasetId_resultTupleSchemeFactory implements SchemeFactory {
      public unpublishRecordsByDatasetId_resultTupleScheme getScheme() {
        return new unpublishRecordsByDatasetId_resultTupleScheme();
      }
    }

    private static class unpublishRecordsByDatasetId_resultTupleScheme extends TupleScheme<unpublishRecordsByDatasetId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByDatasetId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishRecordsByDatasetId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getReportsByOrgId_args implements org.apache.thrift.TBase<getReportsByOrgId_args, getReportsByOrgId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportsByOrgId_args");

    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReportsByOrgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReportsByOrgId_argsTupleSchemeFactory());
    }

    public int orgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_ID((short)1, "orgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_ID
            return ORG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORGID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportsByOrgId_args.class, metaDataMap);
    }

    public getReportsByOrgId_args() {
    }

    public getReportsByOrgId_args(
      int orgId)
    {
      this();
      this.orgId = orgId;
      setOrgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportsByOrgId_args(getReportsByOrgId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.orgId = other.orgId;
    }

    public getReportsByOrgId_args deepCopy() {
      return new getReportsByOrgId_args(this);
    }

    @Override
    public void clear() {
      setOrgIdIsSet(false);
      this.orgId = 0;
    }

    public int getOrgId() {
      return this.orgId;
    }

    public getReportsByOrgId_args setOrgId(int orgId) {
      this.orgId = orgId;
      setOrgIdIsSet(true);
      return this;
    }

    public void unsetOrgId() {
      __isset_bit_vector.clear(__ORGID_ISSET_ID);
    }

    /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgId() {
      return __isset_bit_vector.get(__ORGID_ISSET_ID);
    }

    public void setOrgIdIsSet(boolean value) {
      __isset_bit_vector.set(__ORGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_ID:
        if (value == null) {
          unsetOrgId();
        } else {
          setOrgId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_ID:
        return Integer.valueOf(getOrgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_ID:
        return isSetOrgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportsByOrgId_args)
        return this.equals((getReportsByOrgId_args)that);
      return false;
    }

    public boolean equals(getReportsByOrgId_args that) {
      if (that == null)
        return false;

      boolean this_present_orgId = true;
      boolean that_present_orgId = true;
      if (this_present_orgId || that_present_orgId) {
        if (!(this_present_orgId && that_present_orgId))
          return false;
        if (this.orgId != that.orgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReportsByOrgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReportsByOrgId_args typedOther = (getReportsByOrgId_args)other;

      lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(typedOther.isSetOrgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, typedOther.orgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReportsByOrgId_args(");
      boolean first = true;

      sb.append("orgId:");
      sb.append(this.orgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportsByOrgId_argsStandardSchemeFactory implements SchemeFactory {
      public getReportsByOrgId_argsStandardScheme getScheme() {
        return new getReportsByOrgId_argsStandardScheme();
      }
    }

    private static class getReportsByOrgId_argsStandardScheme extends StandardScheme<getReportsByOrgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportsByOrgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgId = iprot.readI32();
                struct.setOrgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportsByOrgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeI32(struct.orgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportsByOrgId_argsTupleSchemeFactory implements SchemeFactory {
      public getReportsByOrgId_argsTupleScheme getScheme() {
        return new getReportsByOrgId_argsTupleScheme();
      }
    }

    private static class getReportsByOrgId_argsTupleScheme extends TupleScheme<getReportsByOrgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportsByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgId()) {
          oprot.writeI32(struct.orgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportsByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orgId = iprot.readI32();
          struct.setOrgIdIsSet(true);
        }
      }
    }

  }

  public static class getReportsByOrgId_result implements org.apache.thrift.TBase<getReportsByOrgId_result, getReportsByOrgId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportsByOrgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReportsByOrgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReportsByOrgId_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportsByOrgId_result.class, metaDataMap);
    }

    public getReportsByOrgId_result() {
    }

    public getReportsByOrgId_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportsByOrgId_result(getReportsByOrgId_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getReportsByOrgId_result deepCopy() {
      return new getReportsByOrgId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getReportsByOrgId_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportsByOrgId_result)
        return this.equals((getReportsByOrgId_result)that);
      return false;
    }

    public boolean equals(getReportsByOrgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReportsByOrgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReportsByOrgId_result typedOther = (getReportsByOrgId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReportsByOrgId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportsByOrgId_resultStandardSchemeFactory implements SchemeFactory {
      public getReportsByOrgId_resultStandardScheme getScheme() {
        return new getReportsByOrgId_resultStandardScheme();
      }
    }

    private static class getReportsByOrgId_resultStandardScheme extends StandardScheme<getReportsByOrgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportsByOrgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportsByOrgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportsByOrgId_resultTupleSchemeFactory implements SchemeFactory {
      public getReportsByOrgId_resultTupleScheme getScheme() {
        return new getReportsByOrgId_resultTupleScheme();
      }
    }

    private static class getReportsByOrgId_resultTupleScheme extends TupleScheme<getReportsByOrgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportsByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportsByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getReportsByUserId_args implements org.apache.thrift.TBase<getReportsByUserId_args, getReportsByUserId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportsByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReportsByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReportsByUserId_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportsByUserId_args.class, metaDataMap);
    }

    public getReportsByUserId_args() {
    }

    public getReportsByUserId_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportsByUserId_args(getReportsByUserId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userId = other.userId;
    }

    public getReportsByUserId_args deepCopy() {
      return new getReportsByUserId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getReportsByUserId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportsByUserId_args)
        return this.equals((getReportsByUserId_args)that);
      return false;
    }

    public boolean equals(getReportsByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReportsByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReportsByUserId_args typedOther = (getReportsByUserId_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReportsByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportsByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public getReportsByUserId_argsStandardScheme getScheme() {
        return new getReportsByUserId_argsStandardScheme();
      }
    }

    private static class getReportsByUserId_argsStandardScheme extends StandardScheme<getReportsByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportsByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportsByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportsByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public getReportsByUserId_argsTupleScheme getScheme() {
        return new getReportsByUserId_argsTupleScheme();
      }
    }

    private static class getReportsByUserId_argsTupleScheme extends TupleScheme<getReportsByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportsByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportsByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getReportsByUserId_result implements org.apache.thrift.TBase<getReportsByUserId_result, getReportsByUserId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportsByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReportsByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReportsByUserId_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportsByUserId_result.class, metaDataMap);
    }

    public getReportsByUserId_result() {
    }

    public getReportsByUserId_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportsByUserId_result(getReportsByUserId_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getReportsByUserId_result deepCopy() {
      return new getReportsByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getReportsByUserId_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportsByUserId_result)
        return this.equals((getReportsByUserId_result)that);
      return false;
    }

    public boolean equals(getReportsByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReportsByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReportsByUserId_result typedOther = (getReportsByUserId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReportsByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportsByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public getReportsByUserId_resultStandardScheme getScheme() {
        return new getReportsByUserId_resultStandardScheme();
      }
    }

    private static class getReportsByUserId_resultStandardScheme extends StandardScheme<getReportsByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportsByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportsByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportsByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public getReportsByUserId_resultTupleScheme getScheme() {
        return new getReportsByUserId_resultTupleScheme();
      }
    }

    private static class getReportsByUserId_resultTupleScheme extends TupleScheme<getReportsByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportsByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportsByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getReportsByDatasetId_args implements org.apache.thrift.TBase<getReportsByDatasetId_args, getReportsByDatasetId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportsByDatasetId_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReportsByDatasetId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReportsByDatasetId_argsTupleSchemeFactory());
    }

    public int datasetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportsByDatasetId_args.class, metaDataMap);
    }

    public getReportsByDatasetId_args() {
    }

    public getReportsByDatasetId_args(
      int datasetId)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportsByDatasetId_args(getReportsByDatasetId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.datasetId = other.datasetId;
    }

    public getReportsByDatasetId_args deepCopy() {
      return new getReportsByDatasetId_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public getReportsByDatasetId_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bit_vector.clear(__DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return __isset_bit_vector.get(__DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bit_vector.set(__DATASETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportsByDatasetId_args)
        return this.equals((getReportsByDatasetId_args)that);
      return false;
    }

    public boolean equals(getReportsByDatasetId_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReportsByDatasetId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReportsByDatasetId_args typedOther = (getReportsByDatasetId_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReportsByDatasetId_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportsByDatasetId_argsStandardSchemeFactory implements SchemeFactory {
      public getReportsByDatasetId_argsStandardScheme getScheme() {
        return new getReportsByDatasetId_argsStandardScheme();
      }
    }

    private static class getReportsByDatasetId_argsStandardScheme extends StandardScheme<getReportsByDatasetId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportsByDatasetId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportsByDatasetId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportsByDatasetId_argsTupleSchemeFactory implements SchemeFactory {
      public getReportsByDatasetId_argsTupleScheme getScheme() {
        return new getReportsByDatasetId_argsTupleScheme();
      }
    }

    private static class getReportsByDatasetId_argsTupleScheme extends TupleScheme<getReportsByDatasetId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportsByDatasetId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportsByDatasetId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
      }
    }

  }

  public static class getReportsByDatasetId_result implements org.apache.thrift.TBase<getReportsByDatasetId_result, getReportsByDatasetId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportsByDatasetId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReportsByDatasetId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReportsByDatasetId_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportsByDatasetId_result.class, metaDataMap);
    }

    public getReportsByDatasetId_result() {
    }

    public getReportsByDatasetId_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportsByDatasetId_result(getReportsByDatasetId_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getReportsByDatasetId_result deepCopy() {
      return new getReportsByDatasetId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getReportsByDatasetId_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportsByDatasetId_result)
        return this.equals((getReportsByDatasetId_result)that);
      return false;
    }

    public boolean equals(getReportsByDatasetId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReportsByDatasetId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReportsByDatasetId_result typedOther = (getReportsByDatasetId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReportsByDatasetId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportsByDatasetId_resultStandardSchemeFactory implements SchemeFactory {
      public getReportsByDatasetId_resultStandardScheme getScheme() {
        return new getReportsByDatasetId_resultStandardScheme();
      }
    }

    private static class getReportsByDatasetId_resultStandardScheme extends StandardScheme<getReportsByDatasetId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportsByDatasetId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    String _elem26; // required
                    _elem26 = iprot.readString();
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportsByDatasetId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportsByDatasetId_resultTupleSchemeFactory implements SchemeFactory {
      public getReportsByDatasetId_resultTupleScheme getScheme() {
        return new getReportsByDatasetId_resultTupleScheme();
      }
    }

    private static class getReportsByDatasetId_resultTupleScheme extends TupleScheme<getReportsByDatasetId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportsByDatasetId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportsByDatasetId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              String _elem31; // required
              _elem31 = iprot.readString();
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isRecordPublished_args implements org.apache.thrift.TBase<isRecordPublished_args, isRecordPublished_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isRecordPublished_args");

    private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isRecordPublished_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isRecordPublished_argsTupleSchemeFactory());
    }

    public long recordId; // required
    public String projectName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD_ID((short)1, "recordId"),
      PROJECT_NAME((short)2, "projectName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD_ID
            return RECORD_ID;
          case 2: // PROJECT_NAME
            return PROJECT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECORDID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("recordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isRecordPublished_args.class, metaDataMap);
    }

    public isRecordPublished_args() {
    }

    public isRecordPublished_args(
      long recordId,
      String projectName)
    {
      this();
      this.recordId = recordId;
      setRecordIdIsSet(true);
      this.projectName = projectName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isRecordPublished_args(isRecordPublished_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.recordId = other.recordId;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
    }

    public isRecordPublished_args deepCopy() {
      return new isRecordPublished_args(this);
    }

    @Override
    public void clear() {
      setRecordIdIsSet(false);
      this.recordId = 0;
      this.projectName = null;
    }

    public long getRecordId() {
      return this.recordId;
    }

    public isRecordPublished_args setRecordId(long recordId) {
      this.recordId = recordId;
      setRecordIdIsSet(true);
      return this;
    }

    public void unsetRecordId() {
      __isset_bit_vector.clear(__RECORDID_ISSET_ID);
    }

    /** Returns true if field recordId is set (has been assigned a value) and false otherwise */
    public boolean isSetRecordId() {
      return __isset_bit_vector.get(__RECORDID_ISSET_ID);
    }

    public void setRecordIdIsSet(boolean value) {
      __isset_bit_vector.set(__RECORDID_ISSET_ID, value);
    }

    public String getProjectName() {
      return this.projectName;
    }

    public isRecordPublished_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECORD_ID:
        if (value == null) {
          unsetRecordId();
        } else {
          setRecordId((Long)value);
        }
        break;

      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD_ID:
        return Long.valueOf(getRecordId());

      case PROJECT_NAME:
        return getProjectName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECORD_ID:
        return isSetRecordId();
      case PROJECT_NAME:
        return isSetProjectName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isRecordPublished_args)
        return this.equals((isRecordPublished_args)that);
      return false;
    }

    public boolean equals(isRecordPublished_args that) {
      if (that == null)
        return false;

      boolean this_present_recordId = true;
      boolean that_present_recordId = true;
      if (this_present_recordId || that_present_recordId) {
        if (!(this_present_recordId && that_present_recordId))
          return false;
        if (this.recordId != that.recordId)
          return false;
      }

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isRecordPublished_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isRecordPublished_args typedOther = (isRecordPublished_args)other;

      lastComparison = Boolean.valueOf(isSetRecordId()).compareTo(typedOther.isSetRecordId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecordId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordId, typedOther.recordId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isRecordPublished_args(");
      boolean first = true;

      sb.append("recordId:");
      sb.append(this.recordId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isRecordPublished_argsStandardSchemeFactory implements SchemeFactory {
      public isRecordPublished_argsStandardScheme getScheme() {
        return new isRecordPublished_argsStandardScheme();
      }
    }

    private static class isRecordPublished_argsStandardScheme extends StandardScheme<isRecordPublished_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isRecordPublished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.recordId = iprot.readI64();
                struct.setRecordIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isRecordPublished_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
        oprot.writeI64(struct.recordId);
        oprot.writeFieldEnd();
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isRecordPublished_argsTupleSchemeFactory implements SchemeFactory {
      public isRecordPublished_argsTupleScheme getScheme() {
        return new isRecordPublished_argsTupleScheme();
      }
    }

    private static class isRecordPublished_argsTupleScheme extends TupleScheme<isRecordPublished_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isRecordPublished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecordId()) {
          optionals.set(0);
        }
        if (struct.isSetProjectName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRecordId()) {
          oprot.writeI64(struct.recordId);
        }
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isRecordPublished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.recordId = iprot.readI64();
          struct.setRecordIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
      }
    }

  }

  public static class isRecordPublished_result implements org.apache.thrift.TBase<isRecordPublished_result, isRecordPublished_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isRecordPublished_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isRecordPublished_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isRecordPublished_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isRecordPublished_result.class, metaDataMap);
    }

    public isRecordPublished_result() {
    }

    public isRecordPublished_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isRecordPublished_result(isRecordPublished_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public isRecordPublished_result deepCopy() {
      return new isRecordPublished_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isRecordPublished_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isRecordPublished_result)
        return this.equals((isRecordPublished_result)that);
      return false;
    }

    public boolean equals(isRecordPublished_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isRecordPublished_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isRecordPublished_result typedOther = (isRecordPublished_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isRecordPublished_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isRecordPublished_resultStandardSchemeFactory implements SchemeFactory {
      public isRecordPublished_resultStandardScheme getScheme() {
        return new isRecordPublished_resultStandardScheme();
      }
    }

    private static class isRecordPublished_resultStandardScheme extends StandardScheme<isRecordPublished_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isRecordPublished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isRecordPublished_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isRecordPublished_resultTupleSchemeFactory implements SchemeFactory {
      public isRecordPublished_resultTupleScheme getScheme() {
        return new isRecordPublished_resultTupleScheme();
      }
    }

    private static class isRecordPublished_resultTupleScheme extends TupleScheme<isRecordPublished_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isRecordPublished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isRecordPublished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isDatasetPublished_args implements org.apache.thrift.TBase<isDatasetPublished_args, isDatasetPublished_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isDatasetPublished_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isDatasetPublished_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isDatasetPublished_argsTupleSchemeFactory());
    }

    public int datasetId; // required
    public String projectName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId"),
      PROJECT_NAME((short)2, "projectName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          case 2: // PROJECT_NAME
            return PROJECT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isDatasetPublished_args.class, metaDataMap);
    }

    public isDatasetPublished_args() {
    }

    public isDatasetPublished_args(
      int datasetId,
      String projectName)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      this.projectName = projectName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isDatasetPublished_args(isDatasetPublished_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.datasetId = other.datasetId;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
    }

    public isDatasetPublished_args deepCopy() {
      return new isDatasetPublished_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
      this.projectName = null;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public isDatasetPublished_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bit_vector.clear(__DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return __isset_bit_vector.get(__DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bit_vector.set(__DATASETID_ISSET_ID, value);
    }

    public String getProjectName() {
      return this.projectName;
    }

    public isDatasetPublished_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      case PROJECT_NAME:
        return getProjectName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      case PROJECT_NAME:
        return isSetProjectName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isDatasetPublished_args)
        return this.equals((isDatasetPublished_args)that);
      return false;
    }

    public boolean equals(isDatasetPublished_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isDatasetPublished_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isDatasetPublished_args typedOther = (isDatasetPublished_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(typedOther.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, typedOther.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isDatasetPublished_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isDatasetPublished_argsStandardSchemeFactory implements SchemeFactory {
      public isDatasetPublished_argsStandardScheme getScheme() {
        return new isDatasetPublished_argsStandardScheme();
      }
    }

    private static class isDatasetPublished_argsStandardScheme extends StandardScheme<isDatasetPublished_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isDatasetPublished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isDatasetPublished_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isDatasetPublished_argsTupleSchemeFactory implements SchemeFactory {
      public isDatasetPublished_argsTupleScheme getScheme() {
        return new isDatasetPublished_argsTupleScheme();
      }
    }

    private static class isDatasetPublished_argsTupleScheme extends TupleScheme<isDatasetPublished_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isDatasetPublished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        if (struct.isSetProjectName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isDatasetPublished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
      }
    }

  }

  public static class isDatasetPublished_result implements org.apache.thrift.TBase<isDatasetPublished_result, isDatasetPublished_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isDatasetPublished_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isDatasetPublished_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isDatasetPublished_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isDatasetPublished_result.class, metaDataMap);
    }

    public isDatasetPublished_result() {
    }

    public isDatasetPublished_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isDatasetPublished_result(isDatasetPublished_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public isDatasetPublished_result deepCopy() {
      return new isDatasetPublished_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isDatasetPublished_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isDatasetPublished_result)
        return this.equals((isDatasetPublished_result)that);
      return false;
    }

    public boolean equals(isDatasetPublished_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isDatasetPublished_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isDatasetPublished_result typedOther = (isDatasetPublished_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isDatasetPublished_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isDatasetPublished_resultStandardSchemeFactory implements SchemeFactory {
      public isDatasetPublished_resultStandardScheme getScheme() {
        return new isDatasetPublished_resultStandardScheme();
      }
    }

    private static class isDatasetPublished_resultStandardScheme extends StandardScheme<isDatasetPublished_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isDatasetPublished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isDatasetPublished_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isDatasetPublished_resultTupleSchemeFactory implements SchemeFactory {
      public isDatasetPublished_resultTupleScheme getScheme() {
        return new isDatasetPublished_resultTupleScheme();
      }
    }

    private static class isDatasetPublished_resultTupleScheme extends TupleScheme<isDatasetPublished_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isDatasetPublished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isDatasetPublished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProgress_args implements org.apache.thrift.TBase<getProgress_args, getProgress_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgress_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProgress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProgress_argsTupleSchemeFactory());
    }

    public String reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgress_args.class, metaDataMap);
    }

    public getProgress_args() {
    }

    public getProgress_args(
      String reportId)
    {
      this();
      this.reportId = reportId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProgress_args(getProgress_args other) {
      if (other.isSetReportId()) {
        this.reportId = other.reportId;
      }
    }

    public getProgress_args deepCopy() {
      return new getProgress_args(this);
    }

    @Override
    public void clear() {
      this.reportId = null;
    }

    public String getReportId() {
      return this.reportId;
    }

    public getProgress_args setReportId(String reportId) {
      this.reportId = reportId;
      return this;
    }

    public void unsetReportId() {
      this.reportId = null;
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return this.reportId != null;
    }

    public void setReportIdIsSet(boolean value) {
      if (!value) {
        this.reportId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return getReportId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProgress_args)
        return this.equals((getProgress_args)that);
      return false;
    }

    public boolean equals(getProgress_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true && this.isSetReportId();
      boolean that_present_reportId = true && that.isSetReportId();
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (!this.reportId.equals(that.reportId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProgress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProgress_args typedOther = (getProgress_args)other;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(typedOther.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, typedOther.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProgress_args(");
      boolean first = true;

      sb.append("reportId:");
      if (this.reportId == null) {
        sb.append("null");
      } else {
        sb.append(this.reportId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProgress_argsStandardSchemeFactory implements SchemeFactory {
      public getProgress_argsStandardScheme getScheme() {
        return new getProgress_argsStandardScheme();
      }
    }

    private static class getProgress_argsStandardScheme extends StandardScheme<getProgress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProgress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reportId = iprot.readString();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProgress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reportId != null) {
          oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
          oprot.writeString(struct.reportId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProgress_argsTupleSchemeFactory implements SchemeFactory {
      public getProgress_argsTupleScheme getScheme() {
        return new getProgress_argsTupleScheme();
      }
    }

    private static class getProgress_argsTupleScheme extends TupleScheme<getProgress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProgress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeString(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProgress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readString();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class getProgress_result implements org.apache.thrift.TBase<getProgress_result, getProgress_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProgress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProgress_resultTupleSchemeFactory());
    }

    public ProgressResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProgressResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgress_result.class, metaDataMap);
    }

    public getProgress_result() {
    }

    public getProgress_result(
      ProgressResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProgress_result(getProgress_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProgressResponse(other.success);
      }
    }

    public getProgress_result deepCopy() {
      return new getProgress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProgressResponse getSuccess() {
      return this.success;
    }

    public getProgress_result setSuccess(ProgressResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProgressResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProgress_result)
        return this.equals((getProgress_result)that);
      return false;
    }

    public boolean equals(getProgress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProgress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProgress_result typedOther = (getProgress_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProgress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProgress_resultStandardSchemeFactory implements SchemeFactory {
      public getProgress_resultStandardScheme getScheme() {
        return new getProgress_resultStandardScheme();
      }
    }

    private static class getProgress_resultStandardScheme extends StandardScheme<getProgress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProgress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProgressResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProgress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProgress_resultTupleSchemeFactory implements SchemeFactory {
      public getProgress_resultTupleScheme getScheme() {
        return new getProgress_resultTupleScheme();
      }
    }

    private static class getProgress_resultTupleScheme extends TupleScheme<getProgress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProgress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProgress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProgressResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
